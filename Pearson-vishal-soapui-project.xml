<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d9c0ef42-812c-4c87-92b1-cd0e68a78ebe" activeEnvironment="Default" name="ESES" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="d575a2c9-c00a-4b85-89be-ecb35f9476c6" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://172.16.36.46:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#PNSURL} </con:endpoint></con:endpoints><con:resource name="CreateTemplate" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>x-Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="CreateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="NotificationTurnOn" path="/${#Project#notificationTurnOnEnd}" id="5c2ce102-e7e5-4d0c-9d51-186d67b2bd7f"><con:settings/><con:parameters/><con:method name="TurnOn" id="5e3e0a64-7dcf-4633-a9ed-6d074696bae7" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="9dc8013f-d8a2-4c09-8195-fd50e4010ee6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL} </con:endpoint><con:request/><con:originalUri>http://172.16.36.46//event/publish</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GenerateToken" path="/${#Project#generateTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="GenerateToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GetTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405 500</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="as" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DeleteTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DeleteTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="IAMUserLogin" path="/${#Project#UserLoginEnd" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="test12345"/>
  &lt;con:entry key="X-OpenAM-Password" value="secret12"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="IAMUserLogout" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="TokenValidation" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GenerateClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>x-Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Generate Claim Token" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="RetrieveClaimToken" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Retrieve Claim Token" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="as" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GetTemplatebyaltId" path="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>productType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>eventType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>channel</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>locale</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GetTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405 500</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="wre"/>
  <con:entry key="eventType" value="truy"/>
  <con:entry key="channel" value="erwwer"/>
  <con:entry key="appType" value="rew"/>
  <con:entry key="productType" value="rtt"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UpdateTemplate" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>x-Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UpdateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="IAMLogin" path="/${#Project#UserLoginEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="User_login" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="vishal123"/>
  &lt;con:entry key="X-OpenAM-Password" value="Change!1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="IAMUserLoginTokenValidation" path="/${#Project#UserTokenValidationEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="User_Token_Validation" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500 400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="IAMLogout" path="/${#Project#UserLogoutEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>PearsonExtSSOSession</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="User_logout" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcyLKgo9frT6044i2Bc8B7M5p8mU1VWi7Jo.*AAJTSQACMDIAAlNLABQtMTkyNjA5MzgzMzM3MjgzNDkwNwACUzEAAjEx*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>PearsonExtSSOSession</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GenerateIAMUserClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>TokenId</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GenerateClaimToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500 400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="RetriveIAMUserClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>jwtClaimToken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="RetrieveClaimToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405 500 400</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>jwtClaimToken</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="IAMAuth2.0Login" path="/${#Project#UserLoginAuth2.0End}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters/><con:method name="User_Auth_login" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"demo.test@globallogic.com",
"password":"Password!1"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="IAMUserAuthLoginTokenValidation" path="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>AccessTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="User_Auth_Token_Validation" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 500 400 404</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="0887ef47-f558-423a-86ff-fd3b2f356d4a" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="IAMAuth2.0Logout" path="/${#Project#UserLogoutAuth2.0End}" id="68aa021e-3067-4eb9-a31b-4abb2393df63"><con:settings/><con:parameters><con:parameter><con:name>oauthToken</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="User_Auth_logout" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>400 409</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element></con:representation><con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oauthToken" value="5797cb01-5be0-403c-88a2-84959bdf55db" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oauthToken</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="4328cb53-1139-4bb6-84a2-f64bb96a69d6" name="Configuration"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e693c160-fe40-45a7-a22a-f3d3a0da8192" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configurations" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Config" id="3651f01d-d9ba-4683-8841-2413d4620697"><con:settings/><con:config><script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("NS_Templates_email_Sheet",properties.NS_Templates_email_Sheet)
project.setPropertyValue("SessionTimeout_Sheet",properties.SessionTimeout_Sheet)
project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)

project.setPropertyValue("UserLoginAuth2.0End",properties.UserLoginAuthEnd)
project.setPropertyValue("UserTokenValidationAuth2.0End",properties.UserTokenValidationAuthEnd)
project.setPropertyValue("UserLogoutAuth2.0End",properties.UserLogoutAuthEnd)




log.info "Properties added successfully..."
//======================================================

</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="b187605f-ce8e-4aeb-97de-69a3f59b3743" name="NotificationSystem_Template_inbrowser_2"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b21e4233-e52b-4405-b6d3-f99747fe181b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="e01a8d3f-7a72-4454-b9ad-da8cc8d594ff"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="23167e18-1237-425f-90a0-950fe84d109a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="8f0862a3-bd4e-4596-b1a8-7dc56611b0d2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTg0M2U0MWExYzdlNDU0Mzk2MzMyNWRiNDI2YjY5NDAiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.hZBWClJ4qUGfv-5b2AjTW7X6uRsRsxuz_cAzMTpMml6KjvUv5_-RTs_R2MXCFxoEdmr6t4oPJoyVijbOgTta2AGfC5VVKMJket6RbwLATrSG9l9Bg9BsGcqPn-w07hmfSjLul4ci9Tc1zXgrEGW9fDqMQuHdk4eU0WpqaYTASsc" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="f4e9ab21-1bbb-4fb6-af35-f3246f7c71f4" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="14faa2c2-f731-4717-9cd6-8e43ed01ab52" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="bb8e3e1b-c7cd-4a46-be8f-8eacb48d4691" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="68e4a6ee-6379-40ea-9c1e-afc9d1388533" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="61edea47-af05-4256-b141-ee7bba96b7b2" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="dce189ba-b683-4e42-8289-8c64cccc82bb" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="fe922dad-eb0b-4f4d-b969-584171ae3f40" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="1a794037-7e02-4768-ba3b-3ff257539b64" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="f775e6dc-14af-44b9-a844-5f410dc1abd7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="dc05a595-7e63-4a9d-97a8-8dd0de748d21"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="18157011-4de4-4d58-a8ab-9b9d676d61f3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="66736583-17cb-452a-96ee-964af5739f9f" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="55354202-5b41-4db2-8cb4-163a1a601ad9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="4d9f7b98-d5c2-46f6-9bc3-62f9f15c4d20"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="45031767-5190-45be-ac2a-4ae00eb3c58a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c74fa146-f419-4d8f-8c80-b329e24210b9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": " ",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3b36043d-6528-48e6-914c-d8ba477d9f62" name="message"><con:configuration><token>productType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTg2ZTFkMTM3ZDAxNGQ0NWJhMzhmYWFlZTkwNmRjYmMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.d-kiHwRuvD6UaDiCJw_thfudUFwASeFv3LkMHKA5yOirkCBNtS_kod4u6gPuay4SZXUKq6VTdA8-cAflXRPwxMTDNDoit_4Ykz1dvwisuQpuwsC6Eg2KSTcXuTtmghvzHIXX_VY3_g8NA6QLoSQI2wYdgVJqlmwAzfeugYFx1rQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="94b0a8d8-3796-44c6-8225-06861bc20e30" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="028960ea-b2dc-4321-b791-a9ce00ec3b6b"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="d371bd7e-6d36-415d-b3ab-59b0ccbb1c88"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="e1c4cd44-1984-4f49-b8d9-ff0553e627b0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": " ",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>eventType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTk5NzE1MDcyMWVjNDdlYjkyZTJlNDZiYTQxNTY4OGEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.Cjidrpo2cnw-q3x6VY2qagHMWTcpxaiTR_R5vJ1ZFbyUOfA6_FKAFju7psAGdxgZA49h__Brl630oKBPMkkCZNOnlYOPSbB-E9SIPKRaSf8lbiYIYMvPhTs5moFTs_f1_lvPN7ApxtgUSYVhueHC939TkzwHE4FyoPDn5BIL-qE" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="376f0292-5f72-4c7c-8f06-88bd6bcd378c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_AppType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="03bd95a0-5aac-49f8-914b-39e44deb9c2b"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="580f9153-ba2d-4925-8501-0c4b2a4a3618"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="afa6f095-2063-4cab-9cb1-fba299b4ca4a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": " ",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>appType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMGRiMWM3Y2VlMDIwNDcwMThkNTk0NzQyZTAwMzFmZjMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.caYUI_YviQe7v_CSIswdneVAm9CQnps-e6sFsI9IAc_uf4-QXVdPvqy9owwsPzp1Df3-e17VEHUKXOpB3RBXNMUoIBJZx-qRLLVKeis3a7C0JW5bUPsMsSUsqt2jul6rKtWSTdf3S1ZmdXQ73vTAEjFsUUpm5ZpD9FxGhJtGMjI" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="13358e46-2ca7-440a-bb87-2cd803de9e71" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="cbe02726-d3ea-458e-bced-6a12a532ea9d"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="4e436f2f-d157-419a-885b-5e2c536f14a1"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="a0d31eff-33a3-4644-bcf7-63080d3ef0d5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": " ",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>Template missing a required field</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMjkwNTBkZGRiZDFiNDlhZmI3Mzk0NDJkNGJkN2Q0ZDciLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Sxjvq4rrgmRPhkx-0aFmkLgY8IHiLfBMjkbkqkCAAo00ryCyhJQVCHoN92S7-9i6IpxTCiG9DkeT-kD0l2ZWzOuudgls7L5vlg9xClySnNQryIOtpsaFfemQBHCmh0IRYTr59kwSWOfsQ7EuEFMKFh6JKF0WqDIn5KN-dEBo3Ec" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="3be7437a-f2df-4f6f-b58f-ca06ec62a337" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="9db22510-e37b-4422-a4f3-39386577a727"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="31c42f2e-1ad0-409e-81a3-b3252520561d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="ea159a6f-7e5d-4934-9142-72672f31c5f9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": " ",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == " ",'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting [" "] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjFlMThjMTEwMjBkNDgyOTkzYzhkNTcwY2I0ZjU3ODIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.fyWxTdKDNhDwzG_siBG5pi3lysONMkM8jjPCNkTko48iLvJv_nsNEDBsmmayPp1AusT5eMmnDEg83nWat8-cW6j2VfvgVl5W3EZ2EjJnKca2QTI-_z1Diwgs205DvgDLNSTTECf2_eONpd_7lrIHMAS0JZ_sjbhxu1-EghFGRXo" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="7dc91b10-5400-4766-aa32-d7b945d99158" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="3ae87f4e-b960-4224-9673-08a2738aeed8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="56e97e26-a6f9-421c-ae00-87ec47a99f5b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="a65b6330-45a2-4ddb-9255-d36dc657e8e1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="bcb1049a-f4f0-402d-a9b4-4e55a391593c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="1f19ad8d-f201-4d64-8250-928cbbd89f1b"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="54d51ae2-4686-458e-9e64-d218aa94caf0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d5cb2718-1ad2-4278-b726-31e8c269365b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": " ",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == " ",'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting [" "] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZDZkY2Q5ZjU4MGViNDQ1Mjk5MDhiNWM5N2ZjOGJlYWIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.h2JWye0NUOKn9PEARmH5avnuq4S3ZoQ7Wz5CaumgW7LE_Zr4_gmtqS1P87u4g_khPdJu7R4j_p_jvd45vB2U3ypzc07PxDWeXeZQxtowCV4-__dTj76GO-Odj1D66UBLuWz9zinsVlKxs2H_3v6znQJ-a8_ZflnBUIgqbM2UPbg" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="fa347d50-44db-4683-8247-b11e4e45809d" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="1428ce8e-33c2-4bf2-9db4-1f35653d61b5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="5c0efd91-94e5-4ec3-8f35-bd75bd9d5a87"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="df4f4b22-81ca-4b63-aecb-1a0339a11d12" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="d5ffb1d1-85c1-41f2-851c-19bb946c6878" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_Message" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="0e15d459-d3f7-4bec-bd25-e3ac51950d2b"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="2a9e5a20-f45d-466f-b118-1c1cf874e382"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d7ab3574-d09b-4974-88cd-e424dd4aee98"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": " " }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == " ",'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+ expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiY2M2MTQyMjM5YzkxNGYzMzk3MTc5YmZlMTZlMDQ4OWYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.guMElXpbFbLPFbbAfV9rTksc7HxXzO7QStO-c__rFGtzFV1HuiqhWneoiKbXJUhtezhkKl55fstVPzyZ0HEzQadhxn8Fr5iXn81hW34BLThrCW2mTns3-bQXUtT9CUkVZkMs56BqMU71ciuIsO3wQ9XFLn3UeKL7_P428o-0ia8" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="704bab2d-2867-412d-9d79-1cbd55bc3b20" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="7e682a35-e5c7-43f4-9069-981fc98db5a0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="482cb23a-da97-467a-815e-964c5652d121"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9b77bb5b-7fc2-40ef-a447-b87faff89095" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="af014517-76b7-48c7-8140-6310d1069d3f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_invalid_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="dc3f1eb8-c8f8-43be-a035-e03cf41235df"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="4a820d38-a207-451c-a6e2-6c55e8d81fff"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d78f54ff-6cf5-41bd-94a1-02229486b785"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "invalid",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>Template missing a required field</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjgxNTc3MjdjYjYwNDFkYzhmZjdhN2Y3NmUzYTE5M2MiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.BUHJzqcnSbIYiaLofnF7ZApkwmRW_4h7hqqQd4Gy9KBDRj1EFAFkmOWZ9YXq4xX22nCQU1OmWPorfEq8neRvTmkwtJkBQQNOsNtpiIyZ5Q0jKCab7PX6UxQIueecipyWZE0kaL8hONv25guFofBZ-QkgqEV8zAOX8Y1vZaYO2So" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="7f059165-6a19-4bb9-80a6-d68dd473bef2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="ed6fc24f-aee7-40e4-9c4e-c0edc5aa0729"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="dfbba409-7a43-471d-8200-b7262fafef39"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="47966870-1813-4097-9bbf-cddd586a37d5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "invalid#:::::",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "invalid#:::::"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZDVkMGM4ZWQ5MTMwNDc3NGEyZDU3YmRjMGE2YzljMzEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Dp6Xr3lFXuVnwNDGIWr2f-T0hoGgXGP0LPlf7_kTod5bZ05fz2nQe2B2zoAb-NuWaHSrb_1c8bAcsMgTGmydoLJ1wUJCQKedSIsriEatpRlfhPiCQo_HG2VRZZPJE0hOfsl2q66PRHRrVqxZUcbwU43d9oH38guJT0m_Fe8-oTo" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="1e61a247-2de9-4b24-838d-73b8f79ef644"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="99cecc37-a9d1-4aff-808f-54f05bd8e870"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="cb003324-3912-4672-a6f7-f0c06900e11c" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="d849b246-7971-4e62-9ee0-c6f27d67e67d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="a8d50462-a181-4631-88d1-c243af476c52"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="3c187b65-21a3-415a-b1f2-ce1d969a1537"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="cb16f841-f66a-4b22-896a-a87b4d528323"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "###invalid#:#",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiY2U0ODRmMGYwMTA2NGVhNmI4M2JjZWMxODZhNmYwMTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.TMjNw7LxFe1m9QlfhgJwoGdhqCGtjXwYf_ktM5sth8aVUVavQZ_aLY0p1s0xqXIBZwfTw2oiWSEOB6Ap6xj2ei_04W_zooIN5_edaBcQcXxq8FzjfZsCht0on3NeRCVQA8WuafGTHilizWdGK5pJTVfzO73TdwUZo4mEEFTSPLs" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="ba832252-e2cc-4908-ab16-5f4051f4c65d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="e75a1e42-6153-484d-97eb-0010b4cdefcf"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="249832e1-cb28-4c82-a70e-e16b2de68af8" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="953f21b1-c5c3-439e-b78a-e8fba350e94f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="020ded36-242f-4f45-ba37-3276b01c2e62"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="79793bc2-b97f-42d8-83da-8f2e0be5e931"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="9b18520e-9fed-41be-bf45-7c268f747415"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "###invalid#:#",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYTQ0Y2NlZjRmZWFjNGI4NjgyZGU1YWRjZDg4ZjlkODciLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Iky6rrk3R52hu7qLSJKqSfF2dCr8GIg-4X56-yzpCDGq7kRb4XKNeiDl0yR-z2r9ti39D3RJHxAEGIWwvspzkiDINrncQtaS5hY-ZLw-SwWi1SwV5tEXVknK51U7ChfgU31ywvYVYBc2Rt_hdBdsDuIgs4xVCJMnV_eQGw0M4Q0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="9e337f5b-63a4-4911-aeba-da638f7531ec"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="ae705f77-cd37-4e67-b564-af76900e8eaa"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="fc6d9b52-73f1-4867-81fc-f6ddb8c0562b" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="3a6c6647-4087-4609-900d-d2214458b72b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="50b68b75-82d7-4ff7-aa09-b339669a428f"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="f0bfb05b-ae73-45de-b196-5f86e4cb58ab"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c9f1639d-bad7-4837-bb40-7a98b573ebec"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "###invalid#:#",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>Template missing a required field</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYzgzMWZkZjc4MmFlNDgzMmFmMjU4MzFmNzBhMTMwNGEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.C0oum7GBaG7r9miRpWDO-DjPKluogQM0mU3XeYIipmw8Cn24vgj7WZOZl5McHVgVk5sGJWshGRiS1NZ4rgUmz9cTa5YuvrnFDCRxs3oEUDOfqmSmcxKqHV5OzHaN7tUeVHgmS9yWy9-bGjo-K5azRnnr54X__GWUx4e5Ls2s1Y0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="a53951d2-19c3-4aba-9a0d-fb070988b543" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="5d1e25ff-3673-4826-bb0b-51a2233c635c"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="bfacabad-c216-48cf-8900-b2b67d49a041"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="e324ff5a-a2ef-4f53-98ba-293d5af2cfca"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "###invalid#:#",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTVjMGVlODMwZTQwNDk4ZWI4ZDE3NGQ4MjViZjhlMTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.c2uGG3W6oYZHhwdFZyuoviYHexdw7neW9ywMvhntaRendGxIuwg9kujYo4cbPy3VkosEQdsl0bHFUKr6hYfEe_RWS6DV5BpfFRT4SM3DOT1COAzH43X5wC_Mzk6SePyxkwarwT7uyKtDciMXwb0lekfmwdb-szPVU1LjdK95v8c" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="099b4861-f0b2-4471-8ba9-854ae453cd73"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="186a7880-3bff-4e4f-9140-2bca774a09c3"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="555d4bcd-611c-4374-8bfe-130517b8e627" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="5edb85f7-464f-45a4-a0f7-9323a1f1c300" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="c454bb96-d8c6-4e86-8bfe-463ecc994c0a"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="a03a1abb-1680-4696-8ca5-2e33fa0e3535"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="a3af43c4-9c01-4ebf-9f67-410a902c5044"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "###invalid#:#",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTg4OTIxMWM5OTYxNDQ5MDkwNGYwY2E1NDZjYzg4ZDEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.DfxBOawwbBfOPv0Nfx3qc5gsabvEeCtr_dyoBO8-kqpY_qCZRMDEn-uBytXT6xITKPbIIkxoqg44iJ_AWO8BdRYwNjjRHynAXTjCQm7ziWh5WW7qSDCxIbDZ1HegLZ3e5m5TQj1Ewmi0rYhNs0JEJQugvgt8ExHgCPAXoD01wxs" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="73303bbe-0f76-4e89-968b-1599101b7894"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="a587859a-c0de-4a16-9e1a-6ee38810ab55"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="4e02df34-0818-4539-8d9e-47b8ebfedd49" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="52df1494-6947-4e4a-900c-e0309b943597" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_Message" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="5e34e8bc-1581-45cc-9c2f-78e8db82ca1f"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="601853a5-c5fb-46b0-a867-e72e38450d00"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c347abd7-7783-4d87-8a33-1d6c19b2430f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "###invalid#:#" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZjAwNGY4NmE5ZWYzNGY5NWJkYjcwMjlhNzE2ZWFlMzIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.Oze8NutKbExusbi1MX-KYyxceEAyWpd5WTJ6SHe7FYz6sC27p50t2Q-BIAvzRqdWbVoilbACqf4DrCNoAdEKb-ttCu2titLkH_XK8N-loxiiaswy_qDlrPArNozNwuULQN7cPYbosDmThVb-fpumeQPXq_imK7-oYaG52sTI8ao" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="ce899dbe-00c7-49e8-b1fb-415068e79bef"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="cf62d563-824c-40d4-9793-431466c02637"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="5c7be9db-de1f-4e80-a5ce-1ebae155d2ab" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="cdec8734-48e8-41cd-91de-9f0e7706795e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ReCreateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="0164e894-300e-41b9-b342-00766aa85bee"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="3c10c44d-ad75-487f-8865-469f8422cc22"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="5658e6af-c833-40a8-924d-39b592a9214b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "RESTAssured_vishal",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Status"><con:configuration><token>409</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e209381e-9a4d-4fb8-816d-1df4c2e76d5f" name="Message"><con:configuration><token>This template already exists.</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTJmNWE4OGM2ZjdkNGI3ODhhMDc3ZWUyMTMzZTJhMzMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.eHCk8fotWYsps1QfLkKK23G5xkdHbHfXe2CH7LmL5n-SSutITNgt2P-oBRC1WnHxYRWcGV05yumT82wfBFuuSx9ERz95ZGug2rwsygP5enWZ7rg4TvYLqnTJlBmE-KVkIyDUvlOr_47X89ShZ-9KHQjFD2f-Wn35JLxeGVWOsy8" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="293fb6be-a194-40a5-aa39-7a5d8d6c7602" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="a43537a8-775d-4f0f-bbec-b91e382271ac"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="2cd39ccc-6c14-4014-94b7-be0c1ac03e07"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="ee01ac3f-8b7d-43ca-82cd-32ef7acdf97a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMDkxYTQ4NWUzYzM1NGQ5YmFkY2I4YzU5ZDA1OGUyZmQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.IZGXw2YuiymOlMebf2FME7QQaGGfsDskSR_-RvDtIfrtx1qgeIgmU560EZ0hK95kah3btCYK_4cDj_FfCyxurRrt_7pwdPbBeO-ICqOZFI-WqFIwyLs9zgvvE2ITdoiPWpRASf2Iij22Xg4O7G4gwRb3a6dYe6K3GA031zlHPjY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="6234a184-0bd2-4cb8-bcaf-6791f2f0b28b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="690d2810-53a0-40bd-9601-d16376a17c64"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="52a73b72-d4c3-4b9a-a42c-83661ef26ef5" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer2" id="3904c30c-390b-4750-ac51-a0beede717ca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="bcd5d4c8-e676-4edd-80bd-25ab5d3d8e1f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="52a73b72-d4c3-4b9a-a42c-83661ef26ef5" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="d7d32066-ba46-460c-9485-33ca6f1a4884" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="1eb07b4a-c85e-438a-a338-cf557229dcf3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_invalid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate - Request 1" id="107534e7-f702-43ea-8a05-27b7f70ce2d3"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c274444444444444444444444" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="cf8c4de6-7fde-4e42-a042-4701a3da200c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_null" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate - Request 1" id="577f8ddb-16b1-4761-92b4-00432c3a6b8d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>405</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="ec87c120-afe1-43be-be63-79f7823b876a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_specialChar" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate - Request 1" id="8da6dd03-7180-48fb-bf60-c9c40c0a3e34"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="@amp;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="98449dbe-4e2f-4d92-809b-e9c1596faee5" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="76753625-3f40-4f00-97d9-622268b1f93e"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="8437af1d-c6c7-4ad0-9b00-dcecb49d3760"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="62faf9ab-9a63-4f2a-af25-01a291e63b2d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMDcyMjUwY2ExZjVhNDY1N2I3MzRkZjJlYzEwNTJiMjMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.VhUZkmkd1_NJtwh7es1rFpIEnntnuG0UsVZ8p8qIMudMQ5CRVa-B4BgY9MHdC1i3rpsXIaymqlFzHtBBTkj6kAGp4-K1wbU7aqs9eyu1qDOdh2xM9FeBhLzozYS7JlNua-wPRFBEDB7hdt30a66KS-dvOelh3UvS9LzchzLfWf4" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="6efea1e0-555a-4bfb-9a95-29ab0edd0e2f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="16f892e0-0a3c-45e8-9aab-25a0c3e8d927"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="c6de2a86-64af-4513-ba13-1147251de8c3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="feeb8391-6fd4-4b34-8867-7f8f611264f3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="b52a7b3d-6071-4b29-a9b4-238f87a9d9d8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="ecc1a9ac-8fb4-4b5a-a497-841cea2607a0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="1156c9e2-d078-4304-9189-1d63d560a178"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="ca9be08b-50cb-4a8b-ae2d-69d7d4ee2a23"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9ee2bb3e-e875-40a7-b2b8-0811d0512661" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="a18c82fb-0599-4081-8b3b-2f5d51194ec9" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="f4058a53-5888-4f64-8925-25b45362cd40" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="2ad0f741-e9c2-4953-bbd2-9533d819e083"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="invalid78"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="93fdb2d3-85ac-4cf8-aa9b-225fad924d63" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="259e571b-1e8e-4c55-9cd0-26f303e59f1f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="invalid"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="ecd814cd-da45-4f77-a6b5-0eaf1175b82b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="a837a0d7-3d99-4453-b71a-8f9e74c81e3c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="invalid"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="22ef9220-6edf-4cc0-a97d-fd82300ed47d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="7881ae05-4039-4407-9cee-bf62e102254e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="invalid"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="48ecfb15-832b-4981-bf04-48668600c72c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="d538c6c7-9a22-400a-81ef-138efc220fbb"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="invalid"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="f9a4b6d3-f835-4151-bb7e-abc2a9e1fe28" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="fd915e95-b314-4008-a9ab-ff1edd2fd387"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="3eeacc2d-9da6-4dea-9f40-2e55a7f189f6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="9874a024-c3da-4f3c-b808-edeecc6ef2ca"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="16ef49b0-2a0f-41ef-a965-6a95743db3ee" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="dabc11ed-bd25-4e69-bdff-9107222148d7"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="bae82c62-b285-4f49-8119-b0aa17715073" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="ea7d0b54-75b0-4a91-9758-3596a88676a5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="8a732d29-47db-4fe7-bb92-ef302e32e3ff" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="8a0a86ab-81e8-4f0e-9919-6b3443c50067"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="f2b1f07a-13f7-4ff5-81a2-bcccc2c4aa0e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="19e4e612-3da5-4142-aa0f-96bfd0a98d98"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="&amp;amp;"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="09fa9d9e-ae13-4a96-a020-f38471d94c07" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="578b3c05-326d-4860-afb4-996a722664e0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="&amp;amp;"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="0c64a417-0ef9-46a8-81a2-864493d8f694" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="a542cd32-bd43-4506-a960-a3fb7f31a558"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="&amp;:"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="e502ab86-b8c6-47cc-9c57-6e02767022f2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="3f6c8c0a-386e-4901-a1fa-b6b94c2d143b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="::;"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="5b246b9b-4915-4754-a281-2edfedb785f9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="427f45c4-4da8-4c52-a5af-edd76d6b846c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="###"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="8c4d7df8-fb98-404d-afae-a4c0940915b9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="9c4d0956-6a58-48c0-97a2-ae9aefbd0413"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="bbb8fef2-a66a-4275-ab83-80c3db63066e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="2231a94b-9ad3-414f-87f6-dc10f612930c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjE0MDdlNzAyYTZkNGQwY2JjMjE5N2E4YjA0YTRhMmQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.kiWO8IPG06xt2IsbCIRSqtqE7KJkV4LxfuobvawXeqeA3r-Ulgo6CUwRgQo5qLZdbqkIQjC9IKtJ-jaCCU7cdenxNodXJDHCgThiZC1rPMS8Ri21kZSi4RzCZxobMGRTz4hPRHgR-Li-IhYyvOmiZ21kVTQr-4IojanMvRRv6-g" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="f3831bb9-cc0e-475a-b108-df6ba694e64a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="f297771e-6cb1-405d-ba39-3a859be3a360"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="21bfc5ea-8bbd-4c9b-a114-df73a6405536" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="78b11618-dadb-4761-b465-726196eb7e99" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="b5634d8b-61e4-4d1f-851d-cecfcff301e6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_invalid_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="fcbcaee6-8d2a-4796-bf85-5af0874b2520"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="invalid" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="fb12387c-17b1-4f2b-9af0-f11fd06924da" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_null_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="7b6be725-49cc-4f85-840b-a28ff1a8d7a6"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>405</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="11d895e3-380d-458a-a63e-c6d322c3c9a2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_specialChar_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="220f1e84-9ff6-462d-b5dd-aeaedfe7366f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>404</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="&amp;amp;*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="568bc08c-dbda-4d44-a745-0fae95bf55eb" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="da7f1bf9-b7e1-4aa3-afa9-ecc746ec5f04"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="3a53a97c-86a0-4c0c-80a8-5d64baf28ac9"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="63574ba6-f8fa-476f-af09-e816bceac899"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTFiY2VlOGY5YTM3NDY5YmJhMjA2OGFhNWViZGU5MTYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.PYGd66XG4UMHz6Hl5Nt5VCvyIDIWrlTePD8x9I36jsiNcRJbx-vDrFcynXRQ4sgoyu9ZBcJhb14sBR_FfCsKp74yhhhZG165hm5IJ4E8yUC1kVX0ZjbDQZse5fGmLdPb7m4PnLJ3DtYO5CajcC5vYUgYjoxtQmQ9TMo65PbrtyA" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="fb6dafe4-e54c-4784-9bb5-c9ca0aa64bc6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="2d0f6861-cc06-45a9-b4ff-7d261e847f15"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9c7e4da8-4b28-4823-8f39-deb24df434a1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="3973df16-3aa1-4405-aa79-9eacc107f442"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="102df725-5231-4805-8d38-81a938ca7b09"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}" ,
   	"subject": "A topic was created",
     "body": "Hi $eventModel.firstName"
   	
   	}
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9c7e4da8-4b28-4823-8f39-deb24df434a1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="ff0285bb-3b5a-4dbe-8044-4d6d1e7f128c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="d1d23f53-7113-4ef2-b9d0-53ba13dbdca5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="42904bf0-812f-482d-ba48-108292c9ba39"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="3946935f-780f-43a7-923c-3cc126ca9a3f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="d662142f-74a3-4798-9c93-35413a9659fd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="606fc492-6a37-44de-89e3-10fad431df18"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="a3dcb47b-3642-4a6a-8b3a-ae137ca7b18f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="6a75c97d-fb7b-4b59-9beb-c7ce7a10cf0a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9c7e4da8-4b28-4823-8f39-deb24df434a1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="1a201495-3696-4e0f-9b46-5276d0ce2694" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="8054c8c7-b966-4aaa-86b5-8cc7968521b6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_SpecialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="90354a3a-f588-4f38-b301-98849a2e747d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="1861d44b-ff7e-4966-a02b-cfade9048232"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="944fd39e-6dfb-4f5d-a2a1-958cb25ada78"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="6bda3737-2b8e-4902-828e-6caa1375124d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="e311cd4e-dd1f-4260-811a-4aef98bd6a74"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4MTMwMzAsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYWEwNDJmMDY4NGU3NDBhZDkwNDhiYWY1NzM3NTdkNGQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzgwMjIyOX0.j-hHFcfKS581kwtr0-zKWadAz07WdPcAsI93iyOmd3CoxYU5wQs8V0uWARksqxflleBBFcRYloVaal5YaGII8rEYmJFLfdSdl3SES_I9Wsqpcd56vMg07dNJ8UCK_fg6gz9i09AGQw1gmzdymD3aTAHMmNUWJ7GmkI6A63uEFyQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="b0ab8f5d-42c3-4bc5-be4c-71be9a5190cf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="572165d1-803d-46af-bbf9-8f86f217c554"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="ca246a71-389f-427d-b36a-af6fb732baa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="15b001d8-469b-46ac-bd94-6594baf432ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="6e531e5d-ee4f-47dd-bb5d-7eea6e707fce"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}###",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}" ,
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')+'###'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="ca246a71-389f-427d-b36a-af6fb732baa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="09089372-23b7-4707-abfc-91f41f4df478"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="3194541e-be3f-4c35-9d7a-a3329e7063c8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="8f7a90d9-9c77-4533-945e-0ab0e99d6c51"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="a7d596fc-b681-4266-a256-d819fba25623"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="1dcef09d-09d1-4734-84fe-98062534840f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="118e6942-107a-4048-86c4-adc24663adfa"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="2adfd3b5-dbb0-4890-802d-26b25c481894"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="8ecc1b80-e478-408a-be93-74635c38a53e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="ca246a71-389f-427d-b36a-af6fb732baa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="f2b4614e-83bb-42ad-97b5-bffd55d91bec" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="c55aad06-5fec-42d9-8496-993f6e01ca20" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_SpecialChar_MessageName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="bda01a44-35de-49a0-8049-0782ffd8270d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="3739786c-7648-4461-ad46-c1c7426904e6"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="ac60024d-12d2-4440-b29b-c61e35f05f64"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="f67b4bc6-d961-4eed-aa35-650a43d62cca"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="7d24dba2-b667-498a-a6b8-3ba3ce02bc26"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4MTMwMzUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNzM2NWJjNzE2OWViNDQ2YWE5YTViZDdlYzM5NTdiYmYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzgwMjIzNX0.Z1XGHt8xzHuW8KEDAa3Yb0ZjyS3n-OBaWhdwlnJUTqfH3aNitPgkhN-24O4lVvPC6_ithRDfMZPyftqrn1JtMkKrdswIAvirMySnvD4q6Qs7HExNrDEZDuHi0HvNuNcHlusuV2Rd86prFy2TGTp4bywU7qPKMoq9wo7lZMyXbW0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="e57faa26-c040-439f-8dbb-f771e4b146b0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="30cf688b-e7ee-420f-914d-07e1205d1047"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9de4acee-a92d-4095-8597-f08eb2c06c97" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="f8d1fcf8-b077-45f0-ae13-ed38330be545"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="a7d9ad44-fd90-480f-80a6-bf0a151d582e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}#$%$#" ,
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')+'#$%$#'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')+'#$%$#'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9de4acee-a92d-4095-8597-f08eb2c06c97" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="e9e1c434-5f10-4631-b169-8b5f2fbf0a73"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="bce1ce80-5713-4e03-b748-293f7c7ac3f8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="bcbd4e03-d496-4c89-a098-137ec391fb76"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="597ffa1b-0e23-42ea-a195-92a67486a2a8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="a569af00-68e6-4e22-bf2f-340d582c9418"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="6dfdc7a1-906d-4669-847d-9d30dcee4030"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}'+'#$%$#')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="b0a38aaa-1593-4ac8-83e1-da2709df97dc"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="172455af-c814-43ca-95e7-165051091675"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9de4acee-a92d-4095-8597-f08eb2c06c97" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="29382414-5a1d-42b6-a781-21f4f6e94504" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="0aa1c6f9-1c04-48a4-b887-c24150752495" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_inbrowserToEmail" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="072e1ff0-e9a8-4e10-8a46-84fca50a733a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="4f98500c-45c9-48b0-ad52-6f4b74eb8e8c"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c857de8f-03ce-4a1a-aca5-f1a9600b9bf3"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOGQ1Nzg1N2YzODEzNDcyZmE0NDhmNjBjOTQwM2RkNmYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.mAa-Lg-JghAHhseoyvJ5Mxu8KNZ4io571aK8Ys7pj9VoWx3Wvd7d2paOqdLQnHa6F-4Pfv-BNlpSPTl2i62BcLR91WInjsGCCNjq2qKJL2QpgyhV40K-wYE2GzMAK_F-7F7j0LOQCsnW1_Zq1f1GSLwp1dHe3tAL4MkcciC2F2s" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="8f5b9631-9327-4cb5-b38b-70cb32990c54"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="b7fa9a6f-30fd-4e5c-8c25-07e25cb4ec7e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="a43ff2b4-145a-4498-8146-1f056338a415" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="203ec945-9977-49dd-a1da-adb180342013"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="424aac3c-30e6-4b70-a7db-79ca94fefe98"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "email",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}", 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'email'


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="a43ff2b4-145a-4498-8146-1f056338a415" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="32ddcd16-83de-4fca-be8f-284124e79b41"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="32a631a8-23d5-4bee-b07b-a4710c672e67"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="7cea151e-e710-477d-8932-ff4c4ac0095a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="255a319d-29af-419b-a459-e67ae9044695"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="367f2e76-9d8c-4178-ae03-b2509720a0da"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="88d22143-a5ba-45c5-b4b7-e594481fb4f3"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'email'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="dbb4811f-83ac-4dba-9780-b6e69cb63647"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="fe9f036c-1344-4f81-a528-32e3156ff597"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="a43ff2b4-145a-4498-8146-1f056338a415" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="cc3ed0c0-0571-451a-9257-69287fde0cbc" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="df2c6e1e-1d59-4a8d-b108-d07659458c20" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_null_MessageName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="b73dc275-9622-4711-87fd-25a92c308a5c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="13bbeabb-0f64-43ca-9f4a-47655d2f078f"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="2b5eb1b5-74fd-47ac-b124-604ef7ae3204" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="59c30994-10c2-421c-8962-29ee8121340f" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="a1750136-c3da-48f1-9146-dbd4dec22e90"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI2ODAxMzcsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYmIyMTNlZWVmNTA2NDhlMzkwMDk3ZDdkMTg2OWI4MWYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MjY2OTMzNn0.Oeu67jg4chcNITaCQGBVCUB5plDEDW9tR11C5nk8qtQgoP1q0x51056bwwR8lCP-FeMFErF4elmHvfZcTyd9QsA_bJfduzdd6a5rG2QIJvWVNqFVK7DJx2PiO9vAEkSgtLMmLA1Cw2Y_JM2M0WES_UvyGwbXEwI5NFQ4zK8_yPc" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="5ccabed6-85ef-4122-baea-0cb215427c98"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="9f3dfc42-a050-4499-85be-9909365ec80b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="aba1461f-433a-4e16-9062-43052a503254" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="62e43fee-bcba-4adf-af56-2756090e57ae"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="d36b1e07-9619-45a1-87f7-fab706c42d3d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": " ", 
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message !=null,'UPDATE TEMPLATE FAILED :XPath contains message comparison Failed,Field is not blank in response.'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="aba1461f-433a-4e16-9062-43052a503254" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="1cc00ce3-bfb3-4cbb-aee4-777cd98d50ba"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="f85bf9bf-6c38-4dd8-9fd7-dc5e34fe5332"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="4403aacd-6beb-4dd3-889d-369fe786a3ea"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="dea50fa7-d407-4d31-8042-75fad2a79152"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="b135c5ca-e53a-4288-b015-f831e9ee66bd"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="20474303-eb48-46f8-a16f-1c3f227845e0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message !=null,'Get TEMPLATE FAILED :XPath contains message comparison Failed,Field is not blank in response.'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="c978af2d-adca-4a4c-9d27-b6a447367b39"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="c48d5d73-4a30-4c3e-957e-f168a378f572"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="aba1461f-433a-4e16-9062-43052a503254" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="3e912a65-f084-4c24-bd75-beb6a4bdf0c4" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="b0cbd7db-8520-4eaf-86a5-e24581bb565c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="properties" name="Properties" id="3660a52a-bb82-4931-9947-ed0822336f76"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_regress77745560000000000</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>inbrowser</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>message</con:name><con:value>EN-US message</con:value></con:property><con:property><con:name>status</con:name><con:value>Success</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="ReadExcel" id="f47ce14e-f936-434c-be85-52f87c75ced1"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="84958cb3-2948-449a-9f25-c59593538db0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="153fccbc-e8e9-40cf-89eb-6fa96d477fb5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="34acb003-44e0-4a2f-a517-2d66a3c5452b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4MTMwNTgsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMjdhYWU2M2VlNDllNDFhM2EwMzk1YTRjZjIwOWFkYTkiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzgwMjI1N30.EEfcoFod03c0zQqCmnUY1bQdrnhMsUOAaXis0SvzBymsCv-mcvOawb2Bq1RXvpb6EEqmV7krpOiwFk3oOtkmvvT21AKzYDzQze104XEHrgv-GrsKOIU3AbrcWt5HApqTJFG-_i-AimlJWzI4TmdlRXpgRS8QABIEds0StvFfZak" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="5a203878-dd37-4868-a996-7c3fc44ad9aa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="84a0319e-cc46-44ee-99b8-8e153071e550"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="e07364cc-b6e6-487d-a94e-219b40065fa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="1909256a-4ae8-40fc-ab4c-bd6787fbe24d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="f53964a9-c8da-4b36-989a-69646df21d2e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": " ",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}", 
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*


//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName != null,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting null'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="e07364cc-b6e6-487d-a94e-219b40065fa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="68c4f77f-d802-4804-8373-a668ae482a2b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="0f8e1384-810d-49ee-850e-71e9c68dbea2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="b7e97b86-1b60-4dd4-b161-a66483bba4c6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="4aee44c7-4166-4af5-8c5e-cc99122cb361"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="ef64ff2f-ed0f-4655-8291-45cd8742c6ff"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="a5a11774-b8eb-4769-b1cc-6fda61258f21"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName != null,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting null'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_regress77745560000000000"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="091f9665-ff12-4cde-8f63-37827f25bc63"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="71315997-8050-4cc9-8ae6-0e0e0e02f8a7"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="e07364cc-b6e6-487d-a94e-219b40065fa3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="4d19fabb-1cfd-4ad9-81b1-2fd1b2442179" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates_inbrowser_'+dts+'.html'
//def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:testSuite id="7e309eb0-d291-4d88-b9cb-d9d8944b2134" name="IAM_TokenValidation_3"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="bbd65f25-0f95-4928-9992-780bdfda8e43" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configuration" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Config" id="c59c13eb-3b4b-4d51-9625-54aff5cb4f0a"><con:settings/><con:config><script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)


log.info "Properties added successfully..."
//======================================================

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9b1621aa-49cb-40f3-88e9-cc3acfe04239" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_validId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_login - Request 1" id="f07c1a1e-8c56-4d1a-8284-4eaa0f5a12e2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginEnd}" methodName="User_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_login - Request 1" id="b6869222-f3b1-45f7-a3c4-610e68e476ad" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://consul-qa.gl-poc.com</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://localhost/ns/v1/template</con:originalUri><con:assertion type="Simple Contains" id="6aa8bb2d-ef37-440b-95e7-1f5f85369e79" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9951f496-352b-4c98-8bc1-ba344e4d500a" name="TokenIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.tokenId != null,'IAM USER LOGIN FAILED :XPath contains tokenId comparison Failed, actual'+null+'expected  '+jsonSlurper.data.tokenId
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenTransfer" id="4b217230-cb88-49ef-84ac-5aff1e11181d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_login - Request 1</con:sourceStep><con:sourcePath>$.data.tokenId</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>User_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Token_Validation - Request 1" id="18f3bd97-dfa4-4e83-af4a-5a0c40796c14"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationEnd}" methodName="User_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="dc331817-3db0-4f9f-87a0-52abea00255a" name="TokenValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def expectedValue= 'true'

def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'User login token validation fails :XPath contains valid comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="aabf4ba3-a5d3-404e-ace7-c4cd72b08c37" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def expectedValue= 200

def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.status == expectedValue,'User login token validation fails :XPath contains valid comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.status+'] '
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="QIC5wM2LY4SfcxDJ_wa9hsdALj8MPNrM1UG_Dbz5D9hn60.*AAJTSQACMDIAAlNLABM5MDYxNzIyMTc1ODg0ODUwODU1AAJTMQACMTE.*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="21146ae8-d96b-41b9-9403-ab97c02fb5b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_invalidId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Token_Validation - Request 1" id="3ec79a04-433f-4b11-ad75-a20ad97ba6d4"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationEnd}" methodName="User_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="74b64404-18f7-409c-8cb2-b4f61db4fa1c" name="statusAssertion"><con:configuration><token>401</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="13c03c0f-bb65-41ee-bdb2-266245898776" name="Contains"><con:configuration><token>Access Denied</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6004884f-fe73-48b1-91c1-82898de41bf1" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def expectedValue= false

def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'User login token validation fails :XPath contains valid comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="assfgghgjh" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="706da1d2-caf4-40f7-8d49-970a25abe7a0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_specialChar_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Token_Validation - Request 1" id="3bc4c279-7219-4288-8e52-2e9f3744bd8a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationEnd}" methodName="User_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="74b64404-18f7-409c-8cb2-b4f61db4fa1c" name="statusAssertion"><con:configuration><token>401</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="13c03c0f-bb65-41ee-bdb2-266245898776" name="Contains"><con:configuration><token>Access Denied</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1635c23e-7712-4856-9cc3-a60210e3a83c" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def expectedValue= false

def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'User login token validation fails :XPath contains valid comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="##$#$$%@#4" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f9807ef9-2696-402c-81bb-08ee25bbb393" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_null_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Token_Validation - Request 1" id="ea746b49-9e0f-4ead-b1bb-c76b526635be"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationEnd}" methodName="User_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="74b64404-18f7-409c-8cb2-b4f61db4fa1c" name="statusAssertion"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="13c03c0f-bb65-41ee-bdb2-266245898776" name="Contains"><con:configuration><token>tokenId is missing</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f51d3d45-8103-4a36-aa7c-891ce491cc92" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def expectedValue= false

def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'User login token validation fails :XPath contains valid comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="62e61cc2-04a8-41af-be05-00bceeedd1bd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_afterLogout" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="User_login - Request 1" id="93e3cee8-a720-4c5e-a4aa-98eaa8e7be25"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginEnd}" methodName="User_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_login - Request 1" id="b6869222-f3b1-45f7-a3c4-610e68e476ad" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="vishal123"/>
  &lt;con:entry key="X-OpenAM-Password" value="Change!1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://consul.gl-poc.com</con:endpoint><con:request/><con:originalUri>http://localhost/ns/v1/template</con:originalUri><con:assertion type="Simple Contains" id="6aa8bb2d-ef37-440b-95e7-1f5f85369e79" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9951f496-352b-4c98-8bc1-ba344e4d500a" name="TokenIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.tokenId != null,'IAM USER LOGIN FAILED :XPath contains tokenId comparison Failed, actual'+null+'expected  '+jsonSlurper.data.tokenId
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenTransfer" id="2cdac417-7a61-4b33-bdb9-2c13e290cf73"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_login - Request 1</con:sourceStep><con:sourcePath>$.data.tokenId</con:sourcePath><con:targetType>PearsonExtSSOSession</con:targetType><con:targetStep>User_logout - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_logout - Request 1" id="ad04ad67-14b0-4f64-b27d-f0d76209dbca"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLogoutEnd}" methodName="User_logout" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_logout - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfczlaibE_jSipftbkyfs7Sn6e2QKwuX9o8o.*AAJTSQACMDIAAlNLABMxMDgyMDc2MzI4Mjc2Nzg1Njg4AAJTMQACMTY.*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>PearsonExtSSOSession</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenTransfer1" id="61face1d-44ff-4a21-aaec-583b279a142f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_login - Request 1</con:sourceStep><con:sourcePath>$.data.tokenId</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>User_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Token_Validation - Request 1" id="1515b6cf-b8ac-4d99-b387-3aeab172f642"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationEnd}" methodName="User_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="74b64404-18f7-409c-8cb2-b4f61db4fa1c" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="13c03c0f-bb65-41ee-bdb2-266245898776" name="Contains"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="AQIC5wM2LY4SfczlaibE_jSipftbkyfs7Sn6e2QKwuX9o8o.*AAJTSQACMDIAAlNLABMxMDgyMDc2MzI4Mjc2Nzg1Njg4AAJTMQACMTY.*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\IAM_TokenValidation_'+dts+'.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:testSuite id="38c5d453-9e8c-4354-ad1e-95b509e7e468" name="IAM_ClaimTokenEncryptionDecryption_4"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="a6130a97-fef4-4a86-a5d6-305d28602a2b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configuration" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Config" id="ef483e07-ec17-4b0a-b8c2-15002071363a"><con:settings/><con:config><script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)


log.info "Properties added successfully..."
//======================================================

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="81286065-2a8f-4cb7-a3bc-6a27ef8bf619" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_GenerateClaimToken_validId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_login - Request 1" id="7337e592-b5c3-4df4-a2fa-d81af2021e0c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginEnd}" methodName="User_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_login - Request 1" id="b6869222-f3b1-45f7-a3c4-610e68e476ad" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://consul.gl-poc.com</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://localhost/ns/v1/template</con:originalUri><con:assertion type="Simple Contains" id="6aa8bb2d-ef37-440b-95e7-1f5f85369e79" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9951f496-352b-4c98-8bc1-ba344e4d500a" name="TokenIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.tokenId != null,'IAM USER LOGIN FAILED :XPath contains tokenId comparison Failed, actual'+null+'expected  '+jsonSlurper.data.tokenId
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenTransfer" id="77ec0e32-29c9-4fc6-bfb4-fa1f069f3c8d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_login - Request 1</con:sourceStep><con:sourcePath>$.data.tokenId</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GenerateClaimToken - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GenerateClaimToken - Request 1" id="cbbdcf19-b8a4-44da-af42-ea8cd715a163"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="GenerateClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="dbac6e9e-a42c-40cf-a916-457bbdbe7242" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="AQIC5wM2LY4SfcwWi0I58prjulEyM4j12p7ZUcHJ4NOHvEc.*AAJTSQACMDIAAlNLABQtNTM3ODY2MDg0ODcxMzExMzI1NQACUzEAAjE2*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0c777239-93da-473f-87d3-98d8acc8e9b3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_GenerateClaimToken_InvalidId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GenerateClaimToken - Request 1" id="649482df-3f22-449c-9cee-e9bbdca4e53c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="GenerateClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="dbac6e9e-a42c-40cf-a916-457bbdbe7242" name="statusAssertion"><con:configuration><token>401</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="97c63680-d067-4b20-b33b-056588d6f3ae" name="Contains"><con:configuration><token>Token Is not valid</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="AQIC5wM2Linvalid" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1743b725-3e06-4cc0-a3fb-0f3144e022a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_GenerateClaimToken_null_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GenerateClaimToken - Request 1" id="bb4ba71c-41fd-40c9-bc05-4452967b9480"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="GenerateClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="dbac6e9e-a42c-40cf-a916-457bbdbe7242" name="statusAssertion"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="97c63680-d067-4b20-b33b-056588d6f3ae" name="Contains"><con:configuration><token>tokenId is missing</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7830d8b2-769e-46c3-8ebb-503621d84c14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_GenerateClaimToken_SpecialChar_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GenerateClaimToken - Request 1" id="e1013ead-9ec3-44f8-8e30-788d9c29662d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="GenerateClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="dbac6e9e-a42c-40cf-a916-457bbdbe7242" name="statusAssertion"><con:configuration><token>401</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="97c63680-d067-4b20-b33b-056588d6f3ae" name="Contains"><con:configuration><token>Token Is not valid</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="@#$%%^&amp;*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cdcc8a11-9946-4d23-aaab-560a170c32dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_RetrieveClaimToken_validId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_login - Request 1" id="cfcf7ee0-79ca-4afc-9b81-5dc42addda37"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginEnd}" methodName="User_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_login - Request 1" id="b6869222-f3b1-45f7-a3c4-610e68e476ad" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="vishal123"/>
  &lt;con:entry key="X-OpenAM-Password" value="Change!1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://consul.gl-poc.com</con:endpoint><con:request/><con:originalUri>http://localhost/ns/v1/template</con:originalUri><con:assertion type="Simple Contains" id="6aa8bb2d-ef37-440b-95e7-1f5f85369e79" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9951f496-352b-4c98-8bc1-ba344e4d500a" name="TokenIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.tokenId != null,'IAM USER LOGIN FAILED :XPath contains tokenId comparison Failed, actual'+null+'expected  '+jsonSlurper.data.tokenId
</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenTransfer" id="62719f3e-43cf-464a-b83a-1c5160d9b988"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_login - Request 1</con:sourceStep><con:sourcePath>$.data.tokenId</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GenerateClaimToken - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GenerateClaimToken - Request 1" id="586bce63-4546-42ce-9a98-e788db399b4b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="GenerateClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="dbac6e9e-a42c-40cf-a916-457bbdbe7242" name="statusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="AQIC5wM2LY4SfcxnA7G5MwxDgb3LTXWFCaNEt-vGh88FS4Y.*AAJTSQACMDIAAlNLABQtMTQwMjIyNzMyODAxMzQ3MjYwMgACUzEAAjEz*" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="ClaimTokenTransfer" id="e5e1b18b-4391-4ffe-a522-df016199fda3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>GenerateClaimToken - Request 1</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>jwtClaimToken</con:targetType><con:targetStep>RetrieveClaimToken - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="RetrieveClaimToken - Request 1" id="baff9247-1d16-435d-9b1b-3449b47316ba"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="RetrieveClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RetrieveClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="cdc6bb70-b96a-4b72-bcc0-fb7a4c46356a" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jwtClaimToken" value="eyJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIwMWU3MGVmMzViNjBjYTg1NmEyMmQ5NzQ4MTFjOTYxMSIsImNyZWF0ZWQiOjE0OTI1ODQ5MDA5NTUsInJvbGVzIjpbXSwibGFzdF9uYW1lIjoiYmhvcGFsIiwiZW1haWxJZCI6InZpc2hhbC5iaG9wYWw2NDU2QGdsb2JhbGxvZ2ljLmNvbSIsImZpcnN0X25hbWUiOiJ2aXNoYWwifQ.DETV7DVwqUkHQ4kGaWQKNovbpGMDZNZ-whWiKLfKHK3_Qu-3MqSqhIOYgkucq1ueH9w5qUyXoUOQgHwrSoMpAQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jwtClaimToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a2d940a4-db4a-4b29-b50c-e1822d7008a4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_RetrieveClaimToken_InvalidId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RetrieveClaimToken - Request 1" id="9748d9c3-4126-452b-addd-2f9a2f630c87"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="RetrieveClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RetrieveClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c32cf976-a3be-4f51-ae5a-992e08d5594a" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5f9c8361-1f02-4ca4-b885-533348434862" name="Message"><con:configuration><token>JWT strings must contain exactly 2 period characters. Found: 0</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jwtClaimToken" value="Invalid" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jwtClaimToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="78ad2795-8596-4a7d-94dd-e838d8e90253" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_RetrieveClaimToken_SpecialChar_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RetrieveClaimToken - Request 1" id="f44994ab-4e4e-4978-9958-e07b9b565bfa"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="RetrieveClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RetrieveClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c32cf976-a3be-4f51-ae5a-992e08d5594a" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5f9c8361-1f02-4ca4-b885-533348434862" name="Message"><con:configuration><token>JWT strings must contain exactly 2 period characters. Found: 0</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="jwtClaimToken" value="$%#%%%&amp;&amp;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>jwtClaimToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="49030450-fcb7-47ab-9d19-3834226914df" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_RetrieveClaimToken_null_Id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RetrieveClaimToken - Request 1" id="cab51fe7-e59d-4a2b-92c2-ecb2a566b5fa"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#ClaimTokenEnd}" methodName="RetrieveClaimToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RetrieveClaimToken - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="c32cf976-a3be-4f51-ae5a-992e08d5594a" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5f9c8361-1f02-4ca4-b885-533348434862" name="Message"><con:configuration><token>jwtClaimToken is missing</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>jwtClaimToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\IAM_Claim_TokenEncryptionDecryption_'+dts+'.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:testSuite id="b6c8ed83-05c3-4e83-8600-0bbc1a5f737d" name="IAM_Auth2.0_SessionTimeout_5"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="35df9527-905d-4c0c-9b9b-4f3cdede52e9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configuration" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Config" id="b930fce5-bffb-4d1b-b05f-803b8b79db43"><con:settings/><con:config><script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("NS_Templates_email_Sheet",properties.NS_Templates_email_Sheet)

project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)

project.setPropertyValue("UserLoginAuth2.0End",properties.UserLoginAuthEnd)
project.setPropertyValue("UserTokenValidationAuth2.0End",properties.UserTokenValidationAuthEnd)
project.setPropertyValue("UserLogoutAuth2.0End",properties.UserLogoutAuthEnd)




log.info "Properties added successfully..."
//======================================================

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8c8cc8f9-8c92-4835-a3cf-3e1809dab096" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_SessionTimeout_valid_after_30min" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="4273ac51-8e53-4598-aaf4-6c9e490b8834"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="647dbd41-1e9c-439d-8992-ce613f83b03e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="bef2a81e-c9a1-4b75-9e3b-6be9193a2acc"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="AccessTokenTransfer" id="be5d7919-5454-4aa9-8f05-adf90da91232"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="197dbf3f-f574-4431-9a65-d4f524ef84e6"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7abead65-bd89-41b2-9a3e-95fac8423f33" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 200
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="30bacc17-18f4-41a0-b311-282019ea9e8a" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = true
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="630dc612-d74a-4954-8bd1-bcaee05efee1" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="55e4d142-313f-4e62-83e4-e6a27cc517f1"><con:settings/><con:config><delay>1800000</delay></con:config></con:testStep><con:testStep type="transfer" name="AccessTokenTransfer1" id="ae1f45a6-f62c-45c8-a771-29c57326e4b9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_after 30min- Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_after 30min- Request 1" id="a36cf5ac-2da1-4ab5-b494-ad895e538b2b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_after 30min- Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7502bf33-e183-40e6-ad06-eba02d95ec2a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'You have been signed out due to lack of activity. To continue using your account, please sign in again.'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.errorDescription == expectedValue,'Session timer Expires.'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="135b0444-0a5a-4bf4-b38d-134aec4a1a95" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 419
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Session timer Expires.'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8ce6c351-13e5-4518-8f73-1b37726358c0" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Session timer Expires.'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="2c488ad6-52be-4b1b-9e2a-db645a78d83b" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b8c05694-a82a-4959-a033-b4f9097a9f52" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_SessionTimeout_valid_before_30min" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="857ca379-179f-4b49-b30c-c10992cad1e5"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="a626f779-ecf0-4ffd-a676-04338520e18d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="a0d49ffd-1f9b-4e62-867a-9ab4112be783"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="AccessTokenTransfer" id="40a9389a-b49a-4bf7-9828-ec0c3a48cb4a"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="5141311b-c4be-4d75-b98f-0842eca07c61"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="5abbf363-5fea-4860-be5c-4e2bb7c530d8" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="16c7b240-1650-4afb-8047-43d76fa0448a" name="true"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="4991fa73-0982-4b77-afd6-4976e4adf406" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6012233f-d161-49d9-97c6-be5e404e4337"><con:settings/><con:config><delay>1750000</delay></con:config></con:testStep><con:testStep type="transfer" name="AccessTokenTransfer1" id="4757de9c-7f1e-472d-aa06-60ea14848054"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_before_30min- Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_before_30min- Request 1" id="cfd59aba-8000-43da-ac00-2e4e1d4cd043"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_before_30min- Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="4b45a83c-2bdd-4e68-b511-a270a8922d31" name="Contains"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="4991fa73-0982-4b77-afd6-4976e4adf406" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="939ffc61-f3aa-4433-9076-04f84ccf66bb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_SessionTimeout_multisession" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="a389dbf5-b485-42e0-a47c-94acf5f1cb8e"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="431dbdc7-fb03-4f5a-ad0c-d8b30a35dcd8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="874ae994-de00-4d01-ab50-5fba049bad7a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay1" id="2191eb8c-4363-47e6-b0f3-62b0fc848e18"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_login2 - Request 1" id="d73ab8f9-7a7c-4bcf-ba3f-77f32c6d00dd"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_login2 - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay2" id="00317813-007e-4784-a901-196ef38a3f03"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_login3 - Request 1" id="d30a233d-837b-46cd-a49f-10c17ab449a2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_login3 - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="993505c3-babe-43f8-8f90-d68f93dd5da4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="6913956f-f903-4bbf-ae24-911d4c1e004b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="9a2b160d-497d-46cc-967c-32160eb9698b" name="Contains"><con:configuration><token>true</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="cffcc6bc-0a18-40fa-84e5-685fb5cbfca6" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="31b8e11d-6f9f-4da6-af90-86f8944b2b63"><con:settings/><con:config><delay>1800000</delay></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer1" id="4e56ce51-61b6-4b19-ab56-78dd9e871ace"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_after 30min- Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_login4" id="2a4612e9-3257-4e8f-b578-9f9dc330eb37"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_login4" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_after 30min- Request 1" id="5fc6f3e6-b859-49fa-84a4-0908344969ba"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_after 30min- Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="e3f9df9c-a5e5-41ea-a999-41fdfe24bf8b" name="Contains"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="cffcc6bc-0a18-40fa-84e5-685fb5cbfca6" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer2" id="5b18a404-76cc-4056-b703-806e8c3b0c72"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_Auth_login2 - Request 1</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_after 30min- Request 2</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_after 30min- Request 2" id="5251a9cd-a6c9-4ef6-b96f-08fcc8b25b42"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_after 30min- Request 2" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="e3f9df9c-a5e5-41ea-a999-41fdfe24bf8b" name="Contains"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="b75c6706-8871-4d9a-ae0f-ad9e0d7a6e21" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer3" id="c54aaa6e-29f5-42be-b066-e7eb8ea08c04"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_Auth_login3 - Request 1</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_after 30min- Request 3</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_after 30min- Request 3" id="eac0c797-19cf-485c-8b86-37ceae29bb81"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_after 30min- Request 3" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="e3f9df9c-a5e5-41ea-a999-41fdfe24bf8b" name="Contains"><con:configuration><token>false</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="a0a51296-1ee5-490f-8fb2-4db4c0284711" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer4" id="4e696280-2767-47a3-959c-6f8202aded6d"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>User_Auth_login4</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation_after 30min- Request 4</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation_after 30min- Request 4" id="a4e68138-563b-41d5-938d-4ae58e517e9f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation_after 30min- Request 4" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="31c430d7-3230-4cec-9620-5f84d4efff05" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = true
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dc3c238c-7703-4cc4-af57-93ae8870f030" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 200
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="a0a51296-1ee5-490f-8fb2-4db4c0284711" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="163f196f-61ac-4f4f-98b1-ee7912842d1d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_SessionTimeout_valid_after_logout" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="06189c1a-9288-4776-9311-513de935dffc"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="ed8d4780-44fe-4351-aa89-0c7237b630b2"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="802362fe-1242-47cb-87be-ef9777868609"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="9d0b8e6c-96c6-4d42-8549-c07a630f4788"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="fc369c7b-e411-4f54-93fe-f04bdb866e87"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="76eca884-5f27-4db7-a505-6bf452e119cf" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 200
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b05a9ee-ee98-4492-b42d-4b5553738274" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = true
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Session still continuing...'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="9f5ba300-4148-4aa7-b01c-5294828220df" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="OauthTokenTransfer" id="97e4d053-dc19-46bc-bcfe-c226427643b3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>oauthToken</con:targetType><con:targetStep>User_Auth_logout - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_logout - Request 1" id="c785bc6c-30d2-4254-a3c0-d0a34e330ee3"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLogoutAuth2.0End}" methodName="User_Auth_logout" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_logout - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oauthToken" value="9f5ba300-4148-4aa7-b01c-5294828220df" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oauthToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="AccessCodeTransfer1" id="b5e84848-2085-4d1d-8dcf-ecf22b3574b4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 2</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 2" id="303226c4-c5fa-4585-a820-5c0b45dbb6cb"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 2" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="a5b34ce9-e61a-4342-b14f-c767f5135bad" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 401
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Session alredy logged out...'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f4855064-e4f8-4f0a-9fe2-d26c400d0009" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Session already logged out...'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b2e3897b-bb5d-4f47-a955-661eae0b09bd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'You Are Not Authorised'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.errorDescription == expectedValue,'Session already logged out...'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="9f5ba300-4148-4aa7-b01c-5294828220df" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\IAM_SessionTimeout_'+dts+'.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:testSuite id="c2302a11-89e5-47b3-8b68-6a3cc2ead1d8" name="NotificationSystem_Template_email_2"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>PARALLELL</con:runType><con:testCase id="332abb85-0fdd-42dd-844e-bea9cf090478" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="0a5c7c6c-1502-4741-882e-a08781637ff5"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="94fd3c91-690b-410d-8c09-48df9a2e139a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="3b7f8370-179a-4bc5-9a87-e641030b523b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzg5NzUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNmMwZjRiYTk5Njg1NGY1ZDgxNTcyNWI3ZmNhZDliYTAiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyODE3NH0.YBOviXGDBFgPMH-8cmNayczSXS1IfDO1IzPa-yzwX7syHeXwnct1oPTpo8ZTvceAQBA9GfmMHa6h938O-HQamVvxPgwrqwqzWKN5asBxm7ESDM9L9SL7R6aBthzWrvhv95RVjsH69tTa-emPzV7pvxXq_iqQwDBGJGGaNLnWI14" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="8e03ee8b-3503-4da1-a5e8-77bb760401fd" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="da748ee6-7ba5-4f33-94b5-7da7ce4e7e28" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="d3a8049b-7fe8-4f94-a72f-1dfe33edcd21" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="059ebb64-4ddc-43e7-92f6-f4c96c080e50" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="a9260011-4d54-4559-937a-b4554e0ff394" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="1bcf1eaf-cacb-47f2-81d7-034ef432b7df" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="a0be763f-d42c-4cf0-8837-9fe31142261d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="98f13016-a9e2-41ac-bdf6-c3304b73a780" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="466fbd95-e281-49b2-aa0d-fb1d232c01d0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="c24733aa-58b3-49ce-85ea-270fda2f46b5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="1a961bef-f4c2-467c-a334-9e8847d95ae9" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="4c80f0e8-f40f-4acb-b447-3058d0491d50" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="dc628b89-c659-41f3-ba1d-52f160515a52" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="0f35a0bf-353f-4791-bdc7-af65d5c9b90a"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="ddb9ed05-161a-4d6c-be1e-a18ecb708198"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="ec543d7e-70d7-4c45-b929-4ddc8ab1bce7"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": " ",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 
"subject": "${Properties#subject}",
      "body": "${Properties#body}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3b36043d-6528-48e6-914c-d8ba477d9f62" name="message"><con:configuration><token>productType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMDUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMjdiOWVkNmY3YTg3NGM4NDkyODA4MTFmNThkZWYzOTYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUwNX0.XFBkC_qDcY76LrxszTb8h91iSs_VxsR9TgEgVZFLKjCC_vrBLKhDO88KQAm8OY-Os4yVhBS8WQtgjuVWczNrq8Fd23Rylk2eahhn7fltlfHrl-Uj5ez8GrgGA4qpAHXbnTiZJxLzQNd7XpRvA4BPuA2xxKb6ayvrgc6t13np5NQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="f3af88c3-5966-483c-9633-b4081c6ff7f1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="412366fb-7af7-460e-b3ec-79637affa075"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="f3c39763-9bda-4592-8652-a91bd57442b6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="2e4953bf-2703-4271-8e74-93e6f3a965ee"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": " ",
 "channelType": "${Properties#channelType}",
 "template": {
  "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 
"subject": "${Properties#subject}",
      "body": "${Properties#body}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>eventType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwNDAxMDUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiM2RlZmVhOTZiNjNlNDBhOGEyN2U1NTJiMWE2ODU5MTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyOTMwNH0.lcZnLxg48wP99qX_wRpFep3fi-LRf_SwfaU32WzrGzbOgKX4gANyNGqVKvolVA_GlVnHZ8dnm14ub0JwE2EbrUOdztxDQjGVq-OYS5VrY1PmZLP6jL30UcdpcKuEvCwwDui-_4jG1Hqwo8kbOrEOI42vDgWUgtaD3OSMTYbDSQk" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="066785d2-9175-4539-b7c1-0703793835b1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_mail_enull_AppType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="2659000a-f7a7-4a08-afb9-5b25a9093e5a"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="d3fc11f4-7d5b-4257-9f58-fb5eda6cdfe0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="7e1d9ba1-8ce5-497d-8512-653602e2beba"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": " ",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 
"subject": "${Properties#subject}",
      "body": "${Properties#body}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>appType is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMTMsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTI0YTZkMDg0MjVjNGE5ZWJkYzZlNmQwOWZkM2M0YzMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUxMn0.gcWjfm60stIN5XGUCvo0wkkbfquWVQ9U68iOIKXYgoMicOvUwMrpeKL17B_UrvfdD3wa_uonAY2SKCySuIVEVPe_q45U9lp__y6cnE7VKCjC4NZXdqbEOjsjTul0iBJR85L8t2gUhOpq0KXT8jGoCARciY8NlN4Sep55y3gyUlw" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="40d66c6e-5296-4e16-a7ae-e156777aad8f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="1ee1166f-87c3-47e4-98ae-268e04c51649"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="8a553095-952a-4b65-9f68-0a6a194f43cd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="40637a74-ae29-4bf5-bfc1-ad7e26a9518c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": " ",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 
"subject": "${Properties#subject}",
      "body": "${Properties#body}" }
 }
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message"><con:configuration><token>Template missing a required field</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMTYsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMjUxNjNmNWY0ZTc2NDI5MzgxMTIxNWMzNmJlYzhjNjIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUxNn0.RHFR0ynMKmrwgfSFBrEgU_N3Y2faP-ony8jw0YA12hj1aybsDFF8lOsZZbMyaYT-eBMCS58ugQ8ndaWbohFXMz-N7qj527k3oGOkMivOBjowjlJX-lINQ_g_2u2jGPXP4ufFgol_NCfdjEIyfRx-0oLyI-hHepLJgiSHGblXB7E" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="917365e3-3a8c-4a91-9538-326d8b9d3436" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="395da591-967d-42e7-93b4-e522e1311f45"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="f6067a75-a7c4-45f7-a1f0-ead70ed70a5f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="7a5548c8-318e-4db2-9a95-d68718a1562c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": " ",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == " ",'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMjAsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiN2I0NjFhNTkzZWRkNDQ5MWE1OWNmNzUwZDA3ODAzM2MiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUxOX0.Cm4Eu3jGydsR36SzS1rO0W5eMH14rVmpwU7BvUAyNrRoxZn4XwE_prfgS-lzuF2vKHlUZ3e_kdROk2UqsJUuxrTEywRbDWOu_auOVcEqZmGEFDWCl9A_KvzVTsl5ew8rWyo2bLODwSvqxY-jvXTnFMaPdHnhcPeM_IPL89836VY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="d6c671bd-70a7-4496-b709-1d08ba0d3431" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="9aadb263-58f8-4dcb-95ec-6f44e7934472" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="d7b01c3c-0aa6-44b6-ba6a-9b85b63a2567" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="11295b24-4d0e-4c4c-8a6b-3150f56c8e44" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="0469bbbc-8cb8-4c09-ac86-4bd55936d7f8" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="e0eb602b-7105-4472-8ed3-1cde0f9832bb" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="9690b087-e151-4f9c-a064-86e733d7e54d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="d184e5b1-3060-458a-8c3d-b412f8beef6b" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="2d0d6c0a-58ae-43ab-bbe4-ab722b9a43a7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="bf30c948-5888-4458-b8f4-e6ca4334a72f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="f7c1215d-4095-44ec-93c2-a42d08cd0a46" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="d938e388-19ce-4b64-9f16-b69980b5040a" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="adf6721b-217d-4688-ab7a-3281dd7e02fe" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_Subject" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="f74ee03d-0028-4de5-801d-1590f914aece"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="e61fa053-47d2-4415-b878-154760a128e7"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="f97e08f4-179c-46b3-830c-0eec2d5edc3d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": " ",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == " ",'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMjIsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZWQxZGUxNjUzNDQxNDIyNGExOGMxZGQzYWQ2YWE2YjQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUyMn0.RudO1q78-gYuS0ozo2JnjTlqaKontKdiT4ALFYHa80UB9YSK21v0PRBaGioqcqYHbqEQdvE3oYROnLmvqLVC-INHN2QZObFKIigpgYwumDhX5auFmEAvTB1DPALRTBRFTWOmg13UNRju_gQFRXT6jG4Tj6dKic6YCArHJhKlkvw" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="54ef50a4-3fdf-41b4-9dac-6ad376135773" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="3ecb67dc-e6f8-4dd1-8716-43e0556c12f1" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="28af4bff-3f3e-4b14-bd86-027bcf78739b" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="c7252346-0b62-4c2e-ab27-976d3e5af0fd" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="ae3f8ecc-119d-426d-99b6-0c0fae87cee0" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="0ade0207-d8dd-4524-b855-541f415748dd" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="ca5214fe-920d-4c17-bb52-6deda1746c20" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="372fa6ee-881f-4220-9e37-63feeb9a1397" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="717e0d7a-3d7e-46b8-84a9-379e455b92de"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="3b74b51d-aaa0-440c-9ce8-4c5db5c2f8c2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="c74668b7-5816-4b7d-ba02-7ccec16b642e" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="ee305829-2274-4f0d-acfa-0b4d6bd3e466" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="ee1c0907-b051-4534-8a45-86d8d8cd6354" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="9f1bbd27-1ccc-4178-805d-29156bbaea05"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="291ddcfe-5a53-4812-beee-d84e2fa7dbcb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="2a83e6e4-3d0b-4cbc-96a5-c5597a7dc89d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": " ",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == " ",'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting [ ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMjUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTQ3NzRiNWU4Y2ZiNGZjYmJmZDgwNDc5Mzc4ZjFkMTQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUyNX0.mm2Nbnsb4rQq35vwQFy4ZUEwaTKelJ6XKbVEoea48-nXwbB8BTJaoFQmG5FfYtl68HVRTsX_czqnWm7Nc-m8n0TY02BdKjsAv7RzCNejTQAwD9XNt4p5JN4MG8FRHThFQk62inQLJY_ULYqGU-tmmMTUmWnsky5Gt_5kMpb7I1o" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="71880b44-7e93-4f7c-b245-1d4bcc84bf0f" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="1d01adf2-b146-4d37-bf4b-eae45543aa11" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="594c3031-b784-42cc-8a77-a03f634b03a5" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="e34746f3-c540-446c-a517-916222e35d78" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="25a7fac5-f668-4765-86e2-92678a35ece1" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="d3c0a5aa-bd81-41a8-8fa4-82aa3e114f8f" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="71da8298-a33f-43af-8ea4-e3e842960e67" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="64db5e36-33f7-4c1d-8b4c-2ff076358cb6" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="5a8c99fc-c744-49aa-8e18-b898737ef4a8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="8a05c15b-0204-49e7-b6e7-38cc184e25b2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="984f4f11-e06a-407e-90f4-8f4b3b63e59a" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="6494586d-c7e8-4647-83ca-9514bf915935" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="957a9ee0-eb33-44fe-95eb-4132c3b54003" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_null_body" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="f8a0d8fb-710d-4cef-9526-b7a5efdec634"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="d7ac4c10-3f59-4169-9b30-793bef12cef6"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email3345v</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property><con:property><con:name>message</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>status</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="19519326-30e0-4a5c-8f8a-64b2ccdd0955"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMzEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTIzOGUxYmNkMTMyNDQ0ZGExNDU4MjBhYjNjNjE2YTIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUzMX0.mMHBZdPN2i-TYqkECAXd8a96eAdtqi6Yaa5SLI5_dXLcR8RdQglRL6-Z3qjBLXRnox2oIpAY_LHbUSbKKALVUQapcBlxDc9U7tcQPQz2JqV7_xTGO66p6E7CMMivVj5rHTHC93WUcgZuwn-_CLZ7z3hJJwcdpQBA8KmDZQ_UGsQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="c3b69b19-cd9d-4ec9-aa19-80339d95c42f" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="daaa344a-ff6d-4b1b-b92d-ff21bf11d8d2" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="b9e81f8e-5b22-4b59-98af-543a13bd41d6" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="0397fbcc-4489-40d3-b149-c339c4c2ea2b" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="08f24281-3d5a-4810-823c-625f032dccf9" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="1d684200-b025-4cde-ad94-1ba627bb92bf" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="2c5440d1-f86c-4980-93c0-e70c0364e962" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="2867556d-46b8-470b-a5f0-fcedf28379e6" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="08c2ba2c-67a6-4788-9359-2e6dc0723dc1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Create_Template - TC_valid_all</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="6014408c-c880-480e-a7cc-130632cf0334"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="cb7ed857-7489-4e61-a05d-762d8147e16a" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="07beeb03-74ff-4f02-9aa6-2394f08204f5" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="cb9da2f2-2f6f-4841-ba1b-5936139c3f0e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="b8de4ae1-d03f-4f62-93e0-c9522ea536d2"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="e5c3b2bd-a519-45a7-89f3-bbaee1899c81"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType xsi:nil="true"/><con:sourceStep xsi:nil="true"/><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="4c1e3715-c2d7-4bf0-9b15-cb3dc1ae5f51"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "invalid##:",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid##:'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzMzMsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMWE2NjM5Nzc2OTk2NDhiNmIzZDY4NjQ4NTVkN2U5NmEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTUzM30.GFvB-0rnsPHQmN_cfR8aiHGURDil5NSdlj2u43kD39Ru_1fLbCG-CFzStC1nIN6n6P7QEU7HSKdgJ3Lec66YmaQdB9sf-BF_8CqO7JY6J3OAKX8Ym86EBttkrDW7BYDbzmKw5GjVhptDKOAPalJNKv7Lb-rhEPb9srZ73bEN0PY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="07d8a316-aa53-42b3-aafd-61aec309855b" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="4ad5b4c0-7c23-4ac9-aa59-bf40b9cfc843" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="3d176ce3-0127-4487-9f10-9b47332e7ac3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="2bc6618d-f521-424a-b8a2-978078aae79d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="7d01dcc8-1abf-4ce4-9b65-d8a20250a474" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="b6f614d2-c86b-4aee-b711-522f3e9dbe45" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="38538a66-df47-48b4-86fa-c71e2077ab34" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="0daa9c34-7121-4a6d-b9e2-e4242e1d4a5d" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="fe1fc62b-c7b4-48fb-acef-009d19323ee0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="87dd4610-8fd3-4be7-8685-1c3db18e0557"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="9c18a53c-3593-4993-9d5b-f62de18f5f01" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="08845328-078e-40b5-8202-ef1a83488922" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="d48f630c-5028-4b16-a1c8-1c08d7c55e4f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_AppType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="d613a5cb-673a-4ef5-b179-c0923b654a1b"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="731c7b4b-db11-4d8e-b39b-584509deb172"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="e3061085-02ea-4491-8a8a-e7992dd1b775"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="0f3c0bc7-40aa-419a-a61f-e2f4f587193e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="d7ac712c-33f5-498f-9274-a2780b7540a8"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "invalid:######",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid:######'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNDEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZGMxNWE5ZmJkNzBlNGExYTlkZWE5NjQ2NDczY2QwMzEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU0MH0.AX4Soq_kCVuFEj8xoRsLxG6GhdT4fpZg5LF4Fm6wH0lO0iGC-ZMjInCaHAnAEPoUw_SqSm3snwZR6ePUi85ERcqs4tDJ-O1JqJIBe1QqCWHWikLN2ZkafVtmclvTCMc_R5j4kz_e09hg24eYkK_U2YdPRjcD2gkBAfV_6GALgj8" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="aa15c5a4-5490-428d-85fc-9379b48c1caa" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="df4ed84f-ef26-4d8f-9b79-df1ab20d0dfa" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="d59b37f8-0ca1-4adc-8fba-0647cc2640c3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="934cb775-33e4-485c-bef2-dc61d10858b3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="77edaf16-a425-4cd5-b2fe-f9c4bf53ae9c" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="d17d7285-d51f-4592-8ec5-8c9ced9dacb2" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="e778d545-17bc-47ee-a4bf-5ae602ba171b" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="f0ef2639-b3b3-48ff-92ab-4d13a3d1a41e" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="5eb526e7-eea5-4fa3-8226-0023f019baa7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="cbc0a54f-59ff-4867-ac3a-8bafcc67f632"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="4f5c5344-d2de-43b3-8820-de298e61ac23" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="2f3e3102-8d26-4ac5-8230-17cb1ee2a0b0" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="063053da-dc5f-4457-8696-31c9faf8574c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_EventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="729bc5ba-30f4-4eca-a70c-23950883cf1a"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="589975c8-4c88-4898-a8a4-ddaa6ea26abd"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="249869ce-b027-4aeb-8cd0-b4be03ee6b88"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="dbc24e2d-3b9c-414b-939c-f0a37e94d6e9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="dafe8782-a112-4577-a901-c5d5c354abc5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "invalid###",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid###'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNDQsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMmZmOTJkN2UyZGMyNGEwN2E0ODZiMjYyZTY0MzY3NWIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU0NH0.A8CTf4Fr1zpe_RhT7k23P5YKqRV7F1UVYSnoS6N9Roeg9aex_l__o3XHHeSSw7_tsGdOaPh4tWAxZIhtZisZ-qmQANJkQLCAzYyzzT_eh3cRjXBMTaSx0y06q7w5lfjz0gsYJ0XwXhzjDYDj6rpVvtx2H8AhPkhQabFreqP8XSY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="901c8c8d-41cd-4c16-8ec8-390e651dd76d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="138f0a9d-6bdb-4b4d-a0ed-344b2c502b66" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="e21404b3-df59-4b22-a735-8c3e848a6582" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="af99e146-f1f9-46a0-8fc3-1ed229a95206" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="f03230fa-5893-4e24-9f03-26452cfe0e9e" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="83f8856d-c511-4dc4-804a-250b5de468a7" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="99ea0710-3006-49d0-a4e2-3e5b514ed5dd" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="d06e98e0-14b3-4dce-b966-2594e29e68dc" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="83070fbe-cd5a-415b-852a-23cf9474bf64"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="24641db1-bbcd-478d-bf4a-d7134b0d1a56"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="a9188ee2-285a-49d3-8836-f6bfe4f0939e" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="4c61070a-47d1-4973-983b-2b0be6bed6ac" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="0fbc48f4-99cd-47d1-a324-738fe0067290" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="1e0f4238-72b6-41a2-a046-1125a5404d5c"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="7baa4391-2b64-4312-a51d-6110d59e7d6f"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="d524ca12-25f8-4b06-a484-1fa4af546042"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="1a0ff7e0-6456-4549-a48e-6a53a509ca8c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="ee2074f9-7077-4faa-b8db-d8b8c67b954b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "invalid###",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "invalid::",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid###'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid::'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNDgsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMTc5YzBkM2JiOGRlNGY4Y2EzZTVhMGI2NGI2MTQ2YWEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU0OH0.WaT1r5-YRG7poYKMdA988u0UhMZX8fdvmtuxmo67-7KmMbghnvhTTPiHmUq8e6NHTABcubyw7gwV0oDGSgbINCGl_a9cU892R8F-zlGrldrajKW0Z6Agz4WSwAtRi6avxV5xaPu4_gVzPdxHg_fFkIjgVE0MDDMaNRblvI-3sMo" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="e1511373-d1d5-48bb-bf88-e47033069b72" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="8e7acbd4-013c-4bdd-8281-bd7ca8407fd7" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="26ec6e5a-73d3-4919-a5f7-65dd82df563b" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="5f597205-261d-451b-8a28-1ac88d75fab6" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="cc8704e9-7ca1-4db1-a755-d54e66d0eddf" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="be118506-32f8-4919-85eb-d393b7887787" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="fdb60cc8-f54d-4033-833b-0e22cd246dfa" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="c5eca1d9-392f-4d2d-9102-d2d31bcb591b" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="d185ba98-e1bc-4576-8261-972895b412a7"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="0d7e3f3c-e566-48e9-af95-b88ca54e26f9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="e4351793-7e76-4de3-ba3a-dba73fa06529" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="0a5806e2-e8b6-4ef4-bfae-eca1586d6c6c" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="74b0707e-052e-4dd3-867a-25556b8098c2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="4993ebb3-5a20-408d-9bf6-ff81c4d984c0"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="37bb94db-244f-4d47-9d10-4940a4b42f52"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="0b89b83f-33f9-4624-99fc-24dd1c2cf665"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="f2097383-9d26-4e58-b593-cea64fd12b38"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="e065ca43-02be-4ec4-b2a2-1b69507cca4a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "invalid###",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#contactName}",
   "contactName": "invalid:",
   "payload": { 

"subject": "${Properties#subject}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid###'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid:'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNTEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYjU3NDBhZWEzNTllNGUyNmI0MGVlODI0MDdmNDYwY2IiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU1MX0.MkLf-16qRBfKEwOgyMi6wJD1QL2-WjgptqTM06TIK0mrDtGVee0jvCMbkbt0-T4dhy2Z5vwYIGNkmKZG1LiprMCQXfxQEOg9m6KRyMi_x2tIeaVCrjZkS4BDVUHeC8f_jBHzfaCXhQl2gnlOLIz2E2JugNgR2SHxy4G5dJgUIpo" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="2c61f80e-1b03-4b47-a842-4938e5e2943c" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="6c8a3a80-d41a-48ad-bcb9-8d997998ea3f" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="181b81d8-0d24-4493-a2e3-21d0b7350efa" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="93d7f907-928b-43fc-a246-980fbff555c5" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="eda43d91-f921-49a8-a308-b4a5b7ba1f06" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="8bbccf70-92bb-4cbd-840c-98e6473ade48" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="df9408eb-f20f-4a54-beaf-aafdd9bb8c95" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="77934c0f-2cea-4126-9aef-6b31dbcfebf3" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="6a97d52c-443a-4049-ae6e-e5bc25f96fce"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="5a6a0e10-9ed7-4241-8fea-99f307468d87"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="4982eabd-f814-4279-a547-bb1879d71e3a" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="60410079-5e58-4f2e-812e-3527b8746be5" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="bb9519c0-0503-4d37-bcc8-6f21b0649259" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_Subject" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="89f6423c-ec8d-4062-b866-8d3c207305f7"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="ff42e484-a11d-47a3-97da-5acddce9e843"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="e98066f8-a197-4ba4-b161-47cbe54a872a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="1ce114b8-d246-4d2c-bd55-f63cc11e40df"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="815239b7-2074-4dfa-98f9-7f1d1ae2f20c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "invalid###",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "invalid@##$$%",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid###'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid@##$$%'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
log.info jsonSlurper.data.template.locale
assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==' ','CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNTcsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZDY0NmQxZDhjM2IyNDQ3YjgyMDBlOTIwNjA2NzA3NmMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU1Nn0.Rv7DWQvCyG3afy1PEK6xz0CkfhXwKKwzEEVUjFu3P-2lwo1EluAP5Lx0oqluA1pyCfQzv0SD-ebg6nKzagTGjOZ1VpUGSH2kT4cVc8y02bUxPwOsolC0DwjdweWPq6Wk3Du-Wa9VQc7LtWDnl3B4xPIQIOtCGGwI2OKwJD3GT40" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="41a98ac4-23ca-4dbb-8a16-53248a591a55" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="5bb5231f-4d8a-42ef-bc95-d7f06efbdf5d" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="48bc6e63-634e-4ee2-9345-03a51f539c30" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="b4b93ae0-c3be-489e-864b-245176913bc5" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="27d7fd8d-90a8-4f37-855a-df9325fc4493" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="7f415eca-0fba-49d4-88bb-27db7e254697" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="bc996035-da92-456e-a455-980f28e3b8e8" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="1b8991bf-6285-4d69-bbb7-01ce1060fc50" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="8de626e0-4051-475f-b32b-c1172a3c04b8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="f9e5e954-ce3f-40fe-9489-d63c1bbd2eae"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="4838ac56-255c-4263-b626-820cf1fe84d4" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="c5eba137-4826-4dc1-9477-0f3a0361c4dc" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="af6afa8a-f6e5-4e78-b327-554053b10fc3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_email_SpecialChar_body" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="d700d4c9-afcf-4e20-9347-c2d33f66bb22"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="6e43bc03-3914-443a-a709-553b92831ae4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="a772b325-5e4c-4e88-860d-2f6901dc37d1"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="02dfa734-81d1-4fa6-b97c-32440f62c299"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="988d712f-9e15-47da-a243-2be78dc2b450"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "invalid###",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "invalid::"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid###'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue+' ] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue+' ]  actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'invalid::'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body ==expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzNjAsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiODljZTA0OTY3N2VmNDQyMGFlMzU1ZTNiOWZmNzhlZDMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU2MH0.R8sNnIS2nvuxbVj7fvLpSAt9FsmlcAnIEOx1Q9w7GYudwDMbRTbBpbRcw7_syVIUGjt9eS-f_RbbjXCjlJ2juvcW3Ps6VF8zbhUkvUJdVtikuEmvMoOtJkEBq3W2ujwlbtb-dIOV-QIeDuQNrWFBK7rEuB8_9BGG4a6-IdOKZZs" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="2fdf2bcc-4bdd-4236-8687-f4a1ca72c486" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="315ee10f-96be-418c-9a5c-d1bb40473b6c" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="6f1c4fe1-62d0-4c79-a942-6ede969c27f4" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="0f2d4bcc-a725-44f4-83dc-52643ada76bb" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="9606ba87-497f-463d-9d92-56baf34393b2" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="0dfa6326-32f5-4896-9dd1-4cc04419da85" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="544412c4-b303-41b5-9afc-a26d67a6cb16" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="de898e39-b0a3-4022-b340-197524c14ee4" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="3d6080ca-56d1-44eb-9b8c-fa6b6fa292d2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="a4ff93b2-b7d8-4aad-8899-2625c0df59c6"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="585c7689-646b-44c4-8b30-b61b4e72082c" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="31319488-bbb9-4aca-8e2b-2746f9c9a188" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="84d90e75-9224-43a0-a4e1-911630f6ed2c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_specialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="27896eb2-11b5-466e-a766-308585a382a6"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="&amp;amp;"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="b0431387-bbee-4afb-b9b2-7ca637b8672c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_specialChar_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="acea229e-b9fe-4d3d-aaed-0abb3dbdf69b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="&amp;amp;"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="672d072f-3bf3-4ff1-a4c6-06d5aac01780" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_specialChar_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="72eadfe5-4342-40ab-bf34-2dcb985b1687"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="&amp;:"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="80580c71-5f8a-48a0-9a8d-98019aed0f84" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_specialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="d6b63c7b-eddb-49ab-8c38-48e8dfd60e9d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="###"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="110ebf8f-69cd-46b4-ae1e-a77f77dd6cae" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="26e9a0ca-dc86-44f5-8acd-f4ec6dcebd1f"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="4e03f674-a151-450a-bea6-be748e991164"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="fa65de22-5d12-4345-bad4-56f8549eeeb0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="ac28abc1-2e77-4f76-911a-19ac4720b28b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="83811ebb-195b-4190-b8d8-9f116555127e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjAzODIsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZWI0YjFmNTlmMjBmNDhhNTkyNTdmNDRkMjllN2JiYWQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTU4MX0.I9-f06Z7WNpDP3D81j1oxmS0XL1s3sR5oLiMYVxgFu-JnTGnSpv1_XdBYX0h-CpXSsOSRFSatN4Rv4eeLaiMekAtAqUuadvi9f6B1X6NI7xsgghOyLqExmB13Cn9xDRJoGUWRZeKs01PVBjajmqAyfgruZSoQpIiAxkKscBRPOY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="c88c1b5c-1ae4-4579-9b19-ead67ae85db7" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="c980af36-c1f9-4f48-b04f-19758875f7ae" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="87dd21fe-c2f0-4dae-9875-f272df46db71"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="27b86437-1b68-4688-9eac-dcf38cc70cf8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="3d3cbc47-57ff-4982-b2e1-e217e027ebf2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="8ab5662a-e1c1-4719-87f9-6cc3efc285c5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="142dfefb-ca8f-41e8-a30e-d7b644755c07"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="bf9b8832-40a0-4444-ac9f-784a4e0b65e1"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="24586e96-3eb9-4091-b967-aafe940a7ce4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="f27b1a0a-fe22-4e7a-962c-edf087f5d7a2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="99dde06f-6970-4227-a44c-32ff84233bb6" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="b5600372-00a4-467d-885e-4f49efbc5ebe" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="e8e87e36-0de0-4cbb-b117-ecc26fdcfd5c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_invalid_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="4f980963-a364-4be2-8db6-340308377edb"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="invalid"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="07ff5681-117f-4cca-8971-ec82086538bb" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_invalid_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="9d038e13-6c6f-4a64-a171-f23dc64933b1"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="invalid"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="dabd7c78-cdfa-4aa1-842e-818341e3df4b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_invalid_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="200844ae-5a99-467e-b0e1-42e4043ae76a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="invalid"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="07c163b7-b69e-44b4-ac82-c7680d5e2854" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_invalid_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="35e20875-76a6-4b68-8c8e-df1e1145604d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="invalid"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="c90dd617-2d9a-4160-b6d6-cfe7f0c616f7" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="4dd6465c-c65f-4862-abc0-4ac84414f017"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="290d82b8-ee02-4a91-9dc8-191f0356eed3" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_null_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="7f5e562e-01f7-4a3c-863a-2db522bdd18a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="067f1eb2-84c5-4e31-af95-d3909a572206" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="ca133faa-0d9b-4579-a38b-aad5bb3d371b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="1395bd17-6378-4c55-a8e1-c83be728893f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_email_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="restrequest" name="GetTemplate_altid" id="b72df2d2-36d2-4d38-9b83-99040960ffde"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample1"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="21644d89-06fd-4231-8e08-68f900655bae" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyId_email_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="503a44de-c863-4636-9fab-2c338bd2e63a"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="40cc0ca6-e111-48d4-86f8-fe0f36e2416b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="922c9084-c23c-4291-9fa2-dee7a7c784cb"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="74c3efd8-fb4f-4df9-ab5e-892b72296faa"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="9d373977-4c6d-4f44-810d-30b69e0dbcc5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjA0MTYsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjJmOWM2YTcwMDM0NGFiZGI2MzQ3YmQ5ZTAyMzA0YzMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTYxNn0.dpKpXekDgXm3zb5mpRlqvIXTCR_QcsCYQF3bwWiHDjXN3mz6B2GhQQ5rzShbMIGMjrsZp84rPP2J3iMUI-Se63vcoohyLvzSVKI1gfbBxCg7JAUkqesbUi7nX22rlGVs-xxjzOliRAXu6UWWKewg0ZcvVgloZ4UWDcIamMnyBC0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="98d4e425-233d-40cf-9582-74d34b594370"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="51ce3791-3c3b-456c-8b0e-54c48908751d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="3f06ae14-a2e7-4f81-9c2f-90bdcecf67ee" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="d7e177ce-ad89-479b-a60f-c4fd6ec7f791" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="d7572ce8-bc10-43aa-9ffa-4bbe19af0c86" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="b5627383-18a4-4682-82d8-9bd49ef95e45" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="1a845ad5-7714-40b7-83a3-05e607cec46d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="6915684f-4b93-4995-8432-5fadce6c5df3" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="4fbea31b-000c-428b-a0ca-545ab78b9578" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="aaf142c1-5677-4cd5-aedd-3d80e8efde9f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="3cbd74d9-8388-496b-8542-c8a788e82379"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="3f06ae14-a2e7-4f81-9c2f-90bdcecf67ee" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="5509da31-b894-4b12-831c-589ec03e674f" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="5e29927f-21f1-4c60-bb35-5d74c5b4cb89" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplate_email_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="4589c1b6-35e0-4d62-84c9-218f0abe71a6"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="eb6dca97-d793-48ea-87e5-f485927d9b1a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="26d2ada5-2346-4427-8401-8a463a90d7a9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="efb5c9cb-a1d5-4b22-b8f7-babd9402d183"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="00c5e6bb-9501-4d33-9af3-9b281ef39898"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NjA0MjAsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTM5NWQ4YzQxOWZjNDI4NGExMWExY2ZmZDBhYjg3OTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc0OTYxOX0.cqboVOmEZAFi5opTYBaVFfIQ892Drf0dvLcEBTP0sgMZ9WXPozTjFcWUspsRRTYuH1miHM2ZFas-UH9T6FBS2tT83hftinJ2ku8BPAOClTAMuBXzQdCIisSJN00O_9ZnZeBaXVMizz74WqMpUWfhGOA0odhf57TlMCSZJnd_ztQ" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="e5e12691-10bf-4865-b296-197026c87c69" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="be2392f0-145a-4159-beef-cac961783960" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="70d21b1c-33be-4eb5-ba82-98cf66c1ec6d" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="d9a497e2-eb8c-4b93-921c-66b2e00ad8b0" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="e2d8bc06-e3fd-4936-906f-468420969315" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="d317d8fb-f792-4af2-a375-708885800bb6" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="21edcbd2-a7c9-4ed3-a45b-e8967a854e93" disabled="true"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="51cfb74d-fc20-439b-a346-f77a4945bbc6" disabled="true"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="inbrowser"/>
  <con:entry key="productType" value="Template_24"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="c8ba8bdd-7ca9-4bca-a8ed-664c5c153170"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="c0bca583-a515-41b6-9753-eb05a5e2aa82"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="ce9f303a-ca14-4588-b81e-440bca634f0f" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="f2933b82-3f91-4550-8209-b5939498f94f" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="14264876-b031-4772-b20c-053a871bebf6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="f03a8fe4-ca5f-41a0-b1e6-31087af6e6a9"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="188dd3b1-c67c-43a8-b5e1-e1085d0fd8c0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="647bce47-0b4a-4215-b45a-f52aa8cfe063"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="6ef0c5bf-3039-45a1-bfdb-da34d1a5a5ce"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="25fbee30-adb0-402c-aee4-8df510025d67"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzAyMzMsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMGFhODdlNDRkNTllNGZhYTg0MjNkYjkwMTkxMGQzNzQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc1OTQzM30.WYEGl5WpoMu_wfv-zvWXpXJiPvq5-v3YUA1UO_osiR4n7UIAlbWhSWNpS4r-B0EjurRPVqU3PG2EDtAxri7MC0owKF9XjByx0G22RUlagKIf4OY4jSLauj1NEfkFq1CLSv3VDIdb8ZElnTcmXtOFcAHS_A4Vhrmbypo_GQDyNYk" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="d20309fa-bfa2-425b-84ec-3ff298c16a2e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="76ab5553-5a2f-4c43-aec7-7cd8dd58db52"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="96aab597-fb8c-495c-8f78-34c3d43a0573" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="3fb359ac-e3a3-4ae7-a990-e8239881baf2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="f5065d47-17c5-4d07-9f9b-133bac77ae23"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 

"subject": "${Properties#subject}_${Properties#productType}",
      "body": "${Properties#body}_${Properties#productType}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="96aab597-fb8c-495c-8f78-34c3d43a0573" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="eced4e56-6341-4965-bdc5-9fc5a52b76a3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="0076f913-b073-4c99-91c1-6b30b666cc36"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="0178b779-b949-4e54-8e7a-571252be15ee"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="37f2716e-29a8-4b5e-b0ca-be5ebd3589b6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="4c662af4-1cb8-41ba-84f4-09f8c51f2dd1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="25ac1c14-0111-413c-a5ea-9da8212b787d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="32a272c6-f646-4860-b325-40e798455f17"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="68a4c150-35cd-439f-a4b7-c6fdfb903bab"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="96aab597-fb8c-495c-8f78-34c3d43a0573" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="8c812add-2973-48de-adfa-b0f7a56256b8" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="49c2dbea-6d03-479a-a607-39e0591615f6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_SpecialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="321979bd-61aa-495a-b909-263706f4c581"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="3bb0c75a-ba6b-4f42-a4a8-fe91d41e6f5a"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="8d6c6d9e-ce11-4865-b30f-44de18658d8d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="ba2de5df-62a2-4b33-bc43-82281fc53b50"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="deacf3c3-5e2b-47ce-a995-19a93b05dbb0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzAyODgsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjFkZmYyODM5ZWMwNDlmOTgyY2UzZDA0NmRiYzdjY2YiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc1OTQ4N30.aMFIO4_0nkoPJY9vHo9nGqDkYZUmPbNOYHBcxTGEbrWEEBqGt-Ivf7MjA30FFmeXHI5C5ilCRVS1xsFngAtEam4RWd-v2CJ0UrQK8oXm4QCgNiuMaNnZVt0rWd2tHDsYFzWS1d6eeV3Hy-0QzjLHEPs0YG13eynI4qphoHcAfO0" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="03873afb-bf93-4ad6-b449-81c902799dab"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="7225a472-6fc1-454b-9830-01c0bb35f1a5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="975829ba-f14e-4dce-b973-b76c3f19accf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="8ffef89c-e801-45b0-9b9b-21063e85f5bb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="a7952737-c84f-4325-be01-0eb4eb3f00b0"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "#$%%%&amp;%*",
   "payload": { 

"subject": "${Properties#subject}_${Properties#productType}",
      "body": "${Properties#body}_${Properties#productType}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = '#$%%%&amp;%*'
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="975829ba-f14e-4dce-b973-b76c3f19accf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="620ea428-f349-49a2-b004-8e0d55f2935b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="2d47c9d8-ea51-4a5f-9d7c-583480722d65"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="bffd7c03-55d2-4da0-85b3-e5fb1ee19c60"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="95507e3d-380c-4c31-b2a6-07551a85ebf0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="84f9f271-c84a-4939-bfe2-86cee4929c19"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="1190af80-6067-4e5b-936f-af50d942436c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="89dbbaef-9101-4feb-9515-7b0765598aad"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="091e3a30-262b-466c-a2b9-41b9a38e60aa"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="975829ba-f14e-4dce-b973-b76c3f19accf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="7bb6c091-d8bf-4754-b3b1-1bc1a5ba59d6" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="205cb8cd-5669-4c4b-97dc-f4f66111295c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_SpecialChar_Subject" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="fb48059b-861e-4775-a138-e27f99213bcb"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="ddebdefa-7a86-4dd5-bb3a-c78aac5d2091"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="1ed21e0b-ea34-40d3-aa8f-060899ebcb05"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="1af5d09a-1843-41b5-8fb1-3878f7c96013"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="ff5d3f16-f634-4781-a234-c6157004f309"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzI1NzUsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTIwZjBhMjMyYzU5NGI4ZGJlY2EyMWQ1MTkzMzQ0MWIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc2MTc3NH0.O4eoi8TgfBpaIDddKG_7Ey_CLoUTN41yJkz3eOeparhVbrUyUJ-tPy6TkTAi1L6wH7xclvc2ffH9c6rvANcn4TRpo1MoS6Rrm_JuxyMsRs4LkNr3WYejaOUx-dAtgtAKJUZIirlAL9Fl95fS0VKvGTCFpclf7U0MklwwWpJfRmk" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="9b5bf100-5706-4479-a099-527494ddbb8e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="1f4a200d-45cf-4667-9274-3d5c612f631f"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="c7873c77-92cd-40a1-8a1b-5eac5b26d111" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="4f5c5637-c260-4111-9fdf-b77e1e8ba3c3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="07fc5c21-173e-4561-a7ae-43b2e1520f18"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 

"subject": "#$%#$$&amp;",
      "body": "${Properties#body}_${Properties#productType}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = '#$%#$$&amp;'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="c7873c77-92cd-40a1-8a1b-5eac5b26d111" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="d697deaf-fd88-48d6-a49b-635b4dfccdec"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="d99075ff-2cfa-40ae-83bc-b772e6c93e0b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="3a92df74-09f1-484f-ad06-d73aca09221e"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="a005755f-cba6-4f7d-83f4-6653190b0cb5"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="8c5ba9ba-6ea6-44e8-af33-a9a9a97f2509"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="ade87f23-ad8e-4b76-9e1d-c989e40c7b61"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="d110c788-a486-4916-8357-cf98c0d9004f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="5949787c-5d17-4803-bb75-88d51ed80c88"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="c7873c77-92cd-40a1-8a1b-5eac5b26d111" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="ba0d649f-2636-46d8-9804-bc64fbebd4bf" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="a4e8f64d-1b1f-48fc-a5bd-c73a955a671b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_SpecialChar_Body" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="008bee55-be08-4e2a-b93f-c28ebea0216c"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="8c843aec-fe55-4ffd-940c-7281c6374318"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="ad428b2d-163f-43b1-a964-02335e4ffc71"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="d0c2ea3a-44c1-481b-83da-3876bad13659"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="9bf6e828-633c-4373-83bd-c7753830f72d"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzI2NTQsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjliZGU1MjEzN2U2NGY0OWEwYmUxYmZiYzU3OTRmMTAiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc2MTg1M30.OIhBJ4OhkxCrqcULU2Kzt0Q8Ihv-h954sjM-u6FBmbnFLMz7TVv2uxs0_QSoeoiENdaeNGGplP9cFZvEVPJ-xnF60seIcKPLp1xIoCUsidAMRMppAs46aK75Ck_l1E1cRWBGL92LMPhDc-lEuup81Lg0SzaihUWNHhfutv36800" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="d6fae396-cf69-4adc-ade4-869ebe6253e8"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="fbfedbbf-e3ac-4242-8fe9-efa51a07ad46"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="08c246fc-9281-478d-a564-7dc84c41416d" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="77b6142b-c135-406c-9c17-b38fbe54b22c"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="15115b7b-02f8-4b73-a7e6-4348ac02f4c4"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 

"subject": "${Properties#subject}_${Properties#productType}",
      "body": "$#%##$%@#$%"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="08c246fc-9281-478d-a564-7dc84c41416d" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="b7ff8041-43ce-4598-9cde-695d5a9339a3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="f3711319-c099-4e25-bfd3-716058265deb"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="98908406-d4fe-451e-9439-3fe82f62f586"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="7cf06c92-23bf-4430-adfa-a5589eb2a6be"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="3294f581-77f0-49d3-8449-fcd5b308bc23"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="02d9d4c2-f7cc-4739-b5f2-d347ada608a9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="2932a090-239c-4b69-ad8d-2aefee9bb893"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="6c32b02f-e54c-4551-a187-1b09972a0f82"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="08c246fc-9281-478d-a564-7dc84c41416d" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="109ede3a-d283-48dc-afc4-78943cc5edb4" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="ea5772d5-6b1b-4d70-ba44-977096b21a8e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_Null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="74afe975-7490-43ed-8fb9-249586f43d83"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="fde25404-8bdf-4cdb-ab94-d21a49f2314c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="c2473984-ac67-4eb8-beba-6b4d3078fbb2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="b32c7e15-b0f9-46f9-803e-f89214729443"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="976d66ab-47b9-49be-a2ee-5a5e25d1d596"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzI4ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNzkzZDU1MTc5ZjcwNGU5NDk3ZjhkY2MwZmQ3YzM2NjciLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc2MjA4MX0.ZVQMuFeiJUTxr3ABGbOcycHK0qrlzLaTwtw7cZ3Th_RdpTpYm7Dd8kpMeuqZ5CmT-3dcnZ0o4qXcA3d8wFP1Q308B24CeTzESQdFdfx3g4xyND2PAENx9LUB7Qkma2oS21rII2M1lpTzLo4f80SQdkPIo1mbrieHYlh7BP6Dryk" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="43a18479-ec13-498f-80ab-4c9382ba9e22"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="443827b5-1ba4-4bff-a27c-ec813c6d7987"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="1cc781b8-2007-4de1-8e6a-4a279926aebf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="40288797-e489-4751-b875-a7195340efb3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="0bafdc3a-c450-4bf2-b470-177017b533ae"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": " ",
   "payload": { 

"subject": "${Properties#subject}_${Properties#productType}",
      "body": "${Properties#body}_${Properties#productType}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = ' '
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="1cc781b8-2007-4de1-8e6a-4a279926aebf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="bed24ee5-7379-4f6b-899b-ccfe76becc86"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="3c94dede-45e2-4453-9c7e-0ff1feac2a7b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="3b1adf6a-1650-4bd4-ac07-ec428d3a2a81"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="4bb6899b-eadc-4737-8052-47d051f00540"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="82b08e47-9ecf-4521-8c64-892e1a2161a4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="073b777a-2164-4204-99b0-3725541c11f5"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = ' '
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="2f40d4b5-6af8-4ade-a4b3-0f0305396013"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="dc05e010-06d7-4704-a215-3d4c5f0b9847"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="1cc781b8-2007-4de1-8e6a-4a279926aebf" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="f610a0cc-9c14-42f1-86bd-91bf76411877" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="6d9d3777-4624-4d35-8dfa-2a16a3ddd5de" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_null_Subject" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="abe73a7a-e6b7-48c7-a9b4-6ab0c4a08d38"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="a4ed89a8-a4a4-4b6a-907d-28f197544da5"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="05fb8170-f3c2-4f31-9839-b6fb503c6996"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="15b8feb6-632f-43c4-8658-adb283a66ae9"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="0da375d6-f1b0-44ca-8583-8b82e67a3a8e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzMxNzgsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTIwNTNkMDEzNWIxNDgxOWE4YTk3MDQxMTFjMWI2MzIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc2MjM3OH0.XuKmv0ae6VV1Qq2JRfNXGtZ7HtW64j4SHH49nd0cw56dGAwoCsvn0qXKqwGKSOa0-34c_IgQ73xB8d2mmhyu4qSrrB6fmaS6rVFkFDJ-T0PiqMXT7JSYVAD9t-x1NWHrsuFAotmp7cFBuxIFPlseLKKDteCRhQU7Z9W8PVDuv5c" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="54a1efa2-b4e4-407d-8a66-9153678933ab"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="606d917f-025d-4cd6-b496-2be970e462da"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="bfeca294-443b-4e68-acf2-372c0ece01d5" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="40ffa23f-c01a-4fff-b221-51dd3cdb5ee1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="4ca23d9b-dce8-4eb6-91c0-5cdc38776773"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 

"subject": " ",
      "body": "${Properties#body}_${Properties#productType}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = ' '
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="bfeca294-443b-4e68-acf2-372c0ece01d5" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="1a9740e7-443b-4e52-88ad-b48e08cde3bf"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="429cb730-6b31-496b-81e4-5927dec77512"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="f51c6e07-c15b-494b-8b40-ae74b6226e7b"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="2b13f0d2-b921-4102-9b4b-222616cb45c4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="12f0c1f6-677a-4ef3-b980-8656f01d5980"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="38baab9e-66a2-4388-9fba-a1b0c7b1d44e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = ' '
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="553ac7a0-3d48-4b55-afc3-14df176206db"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="b376b188-ce4c-4ce4-856e-53ab732c520e"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="bfeca294-443b-4e68-acf2-372c0ece01d5" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="6a1aac07-e924-4879-add1-1cab8b6996d8" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:testCase id="cac0c18e-4463-480a-ae6e-82eac47c2cba" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_email_null_Body" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false"><con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description><con:settings/><con:testStep type="groovy" name="ReadExcel" id="0526ac3b-5eb4-4a7c-95ab-58b4ac05df7c"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Templates_email_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("subject", tempValue[7])
propTestStep.setPropertyValue("body", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="d0634850-bee1-43cb-aaff-983932130818"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>productType</con:name><con:value>Template_Sample_email331110</con:value></con:property><con:property><con:name>appType</con:name><con:value>appType</con:value></con:property><con:property><con:name>eventType</con:name><con:value>eventType</con:value></con:property><con:property><con:name>channelType</con:name><con:value>email</con:value></con:property><con:property><con:name>locale</con:name><con:value>EN-US</con:value></con:property><con:property><con:name>contactName</con:name><con:value>22dionysus@pearson.com</con:value></con:property><con:property><con:name>subject</con:name><con:value>A topic was created</con:value></con:property><con:property><con:name>body</con:name><con:value>Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic.</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="eebbb3b3-0003-4dc1-a157-9d65018e3c35"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#PNSURL} </con:endpoint><con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion"><con:configuration><token>success</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer" id="5cebce3d-d563-479d-bd6a-ea3299d358d1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep><con:sourcePath>$.data</con:sourcePath><con:targetType>x-Authorization</con:targetType><con:targetStep>CreateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="CreateTemplate - Request 1" id="7fb07ce8-192c-4749-9e58-ba23443676ab"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { 

"subject": "${Properties#subject}",
      "body": "${Properties#body}"
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains"><con:configuration><token>201</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI3NzMyNTEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMDcyNmE1Y2ViNDA2NDc0YmFlNWUxOGUyYzM2YzlhYzIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mjc2MjQ1MX0.BfQRBZ4pATpgJk9mYhnVUqzcnrMFjoamHmYESnR-i9EBiEfKCiHWfvuZuchHWmyATE9W__d41sdDw-y3QDfqMrJcTRIoc3pf2cX4l31SGSe7ipbQPYzn8hahwytEsjjR0lesA1EGYVhX4v4LCTYp01FK6oAWK00JEoEsSv6tjec" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>x-Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer" id="0989a68f-3857-4cee-86a1-4f28c4cc4fac"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>GetTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate - Request 1" id="467d22c5-a699-47fb-9c28-2c3ac72e8514"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="f7d55774-9722-4939-9697-632dbb68be48" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TokenIdTransfer2" id="8ab5c40d-ae06-41cc-b962-e45dbdc4f979"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>UpdateTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="f3d942e8-950f-42fa-9914-4ef5ba84b568"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 

"subject": "${Properties#subject}_${Properties#productType}",
      "body": " "
    }
}}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="f7d55774-9722-4939-9697-632dbb68be48" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="productTypeTransfer" id="07302388-9cae-4230-99c9-1a51f86c70d3"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.productType</con:sourcePath><con:targetType>productType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="appTypeTransfer" id="001382ee-e5ff-4d83-9fb4-6b62b3ef6fe6"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.appType</con:sourcePath><con:targetType>appType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="ChannelTransfer" id="45773aa8-6f14-47c9-89f0-a66c644e19b4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.channelType</con:sourcePath><con:targetType>channel</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="EventTransfer" id="7ed4b656-f19f-4077-8a46-a0f6942230a1"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.eventType</con:sourcePath><con:targetType>eventType</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="transfer" name="localeTransfer" id="2ea8d69b-7ca7-4999-b4c5-c952b15660c2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>UpdateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.template.locale</con:sourcePath><con:targetType>locale</con:targetType><con:targetStep>GetTemplate_altid</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="GetTemplate_altid" id="c759531e-eb24-40b0-9899-46a7a1e1c4a9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadBodyAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#body}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body !=null,'CREATE TEMPLATE FAILED :XPath contains payload.body comparison Failed'</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'
</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadSubjectAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#subject}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.subject comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.subject+']'
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="locale" value="EN-US_Template_Sample_email331110"/>
  <con:entry key="eventType" value="eventType"/>
  <con:entry key="channel" value="email"/>
  <con:entry key="appType" value="appType"/>
  <con:entry key="productType" value="Template_Sample_email331110"/>
</con:parameters><con:parameterOrder><con:entry>productType</con:entry><con:entry>appType</con:entry><con:entry>eventType</con:entry><con:entry>channel</con:entry><con:entry>locale</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="TemplateIdTransfer 1" id="a05f9af4-12c7-4700-9f6d-91bfdbddad4f"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>TokenId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateTemplate - Request 1</con:sourceStep><con:sourcePath>$.data.id</con:sourcePath><con:targetType>TokenId</con:targetType><con:targetStep>DeleteTemplate - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="2374c803-8f43-4121-8aa4-71132b132de2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion"><con:configuration><token>204</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="TokenId" value="f7d55774-9722-4939-9697-632dbb68be48" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>TokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="40fb901b-7211-4dbd-a005-d505c77b59ae" disabled="true"><con:settings/><con:config><script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script></con:config></con:testStep><con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates_email_'+dts+'.html'
//def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:testSuite id="41bb5e7e-bb6e-40d3-803e-377b374aedbc" name="IAM_Auth2.0_TokenValidation_5"><con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1e9c50da-0528-4535-9bc3-e86101636f88" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configuration" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Config" id="b3d9fe69-8fd5-425c-a72b-c2eaa540c335"><con:settings/><con:config><script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("NS_Templates_email_Sheet",properties.NS_Templates_email_Sheet)

project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)

project.setPropertyValue("UserLoginAuth2.0End",properties.UserLoginAuthEnd)
project.setPropertyValue("UserTokenValidationAuth2.0End",properties.UserTokenValidationAuthEnd)
project.setPropertyValue("UserLogoutAuth2.0End",properties.UserLogoutAuthEnd)




log.info "Properties added successfully..."
//======================================================

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ec6109b3-5484-4fa0-baf8-ea947296502c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_valid" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="e36c4bda-3256-4dd6-bdff-ea8fe501f326"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="e85973c9-07f1-4e5c-8c6a-f8c8d946bca4"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="713439da-459d-45be-aa69-1e904b81d881"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="4eda9c4e-1fa4-47cc-9376-4409160c59b4" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="AccessTokenTransfer" id="8ac40662-52b5-47b1-857c-a28859ab9405"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="123be8db-5d53-4532-99a6-a7fa9aa6cbae"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="13c07cc0-2935-4f78-b4a1-cae7dbf27e6a" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 200
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.statusCode+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7a986a1a-1370-4aa7-8fa7-4dfd6e8fb7f9" name="validityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = true
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="a37c638d-8350-4cb4-8ecc-dc089929c7fe" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e67e82a3-c99a-4bcc-8e6e-16890a96b580" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_after_logout" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ReadExcel" id="d3e99321-7712-4aec-9be0-d3968512bf23"><con:settings/><con:config><script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#SessionTimeout_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("UserName", tempValue[1])
propTestStep.setPropertyValue("Password", tempValue[2])
 
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "IAM_AUTH2.0_Login";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="fd0e762d-25a8-4738-8be0-47b4dde89cbb"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>Total</con:name><con:value>2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>vijay112</con:value></con:property><con:property><con:name>Password</con:name><con:value>password123</con:value></con:property><con:property><con:name>Next</con:name><con:value>2</con:value></con:property><con:property><con:name>StopLoop</con:name><con:value>T</con:value></con:property><con:property><con:name>ID</con:name><con:value>TC_valid_all</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="IAM_AUTH2.0_Login - TC_valid_all" id="5884aac1-efac-4cea-b964-4245822bb782"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLoginAuth2.0End}" methodName="User_Auth_login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="IAM_AUTH2.0_Login - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request>{
"userName":"${Properties#UserName}",
"password":"${Properties#Password}"

}</con:request><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="ead3fcbd-234e-4f0e-a5ca-87c81e0d79b4" name="Contains"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="ef05be8a-3354-4655-a641-60294c2aca24"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="b8687fb6-6a67-4f57-9065-8f37dd99437b"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="76eca884-5f27-4db7-a505-6bf452e119cf" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 200
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.statusCode+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b05a9ee-ee98-4492-b42d-4b5553738274" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = true
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="a472756e-a13b-41ed-96a5-001b6b8a63d3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="OauthTokenTransfer" id="fe8267aa-858b-40b8-a384-d1c4cd520064"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>oauthToken</con:targetType><con:targetStep>User_Auth_logout - Request 1</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_logout - Request 1" id="f05c97b9-cb95-4df4-b5a0-f53b3fe8cd22"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserLogoutAuth2.0End}" methodName="User_Auth_logout" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_logout - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="Simple Contains" id="2d6c8401-c506-487e-88b4-d79789e462d8" name="StatusAssertion"><con:configuration><token>200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="oauthToken" value="a472756e-a13b-41ed-96a5-001b6b8a63d3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>oauthToken</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="AccessCodeTransfer1" id="19ed7262-0c41-43b2-b6f0-241994fb5cab"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>AccessId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>IAM_AUTH2.0_Login - TC_valid_all</con:sourceStep><con:sourcePath>$.data.access_token</con:sourcePath><con:targetType>AccessTokenId</con:targetType><con:targetStep>User_Auth_Token_Validation - Request 2</con:targetStep><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 2" id="80bb52f3-0b08-4eee-9c0a-ca30a6c6046c"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 2" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="a5b34ce9-e61a-4342-b14f-c767f5135bad" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 401
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.statusCode+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f4855064-e4f8-4f0a-9fe2-d26c400d0009" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b2e3897b-bb5d-4f47-a955-661eae0b09bd" name="ErrrorAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'You Are Not Authorised'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.errorDescription == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.errorDescription+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="a472756e-a13b-41ed-96a5-001b6b8a63d3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c9ea5157-f663-4091-87d8-dc0d35ce10c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_null_TokenId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="8c840572-7353-4180-91d2-f8f69016d1f9"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b61a24bd-730f-477b-a32b-7594009a376b" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 404
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Token Validation Failed :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.statusCode+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7a100424-4d26-4f08-84a3-4268b80a4201" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="27f2c288-e0c1-4561-b4f9-bddde0ade93d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_invalid_TokenId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="3fde749f-6e21-401c-9f26-f4b9777a7ce2"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="13c07cc0-2935-4f78-b4a1-cae7dbf27e6a" name="ErrorStatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 400
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.errors.status == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.errors.status+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7d4ea8ee-a3b3-4aba-98fc-09d3867fa306" name="statuscodeAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 400
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.statusCode == expectedValue,'Token Validation Failed :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.statusCode+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2bd1f4bf-832d-410d-97ea-3c313bb85292" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="assfgghgjh" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cf398e0d-bfef-453c-856e-9d96e64e69bb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="IAM_TokenValidation_specialChar_TokenId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="User_Auth_Token_Validation - Request 1" id="5e835bd7-1e9e-41cd-a0c1-9603ab27c31a"><con:settings/><con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" methodName="User_Auth_Token_Validation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Auth_Token_Validation - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#QURL}</con:endpoint><con:request/><con:originalUri>http://172.16.36.46/event/register</con:originalUri><con:assertion type="GroovyScriptAssertion" id="13c07cc0-2935-4f78-b4a1-cae7dbf27e6a" name="StatusAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 400
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.status == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.status+'] '</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="66590e9a-26a5-4825-8eb9-a72c2664574d" name="ValidityAssertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = false
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.valid == expectedValue,'Token Validation Failed : :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.valid+'] '</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccessTokenId" value="assfggh##gjh" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>AccessTokenId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\IAM_TokenValidation_'+dts+'.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript><con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript></con:testSuite><con:properties><con:property><con:name>eventJSON</con:name><con:value>Adding data for load</con:value></con:property><con:property><con:name>PNSURL</con:name><con:value>http://tst-piapi-internal.dev-openclass.com</con:value></con:property><con:property><con:name>notificationTurnOnEnd</con:name><con:value>/ns/v1/notifications/turnOn</con:value></con:property><con:property><con:name>QURL</con:name><con:value>http://consul-qa.gl-poc.com</con:value></con:property><con:property><con:name>TemplateEnd</con:name><con:value>/ns/v1/templates</con:value></con:property><con:property><con:name>NS_Workbook_Path</con:name><con:value>DataSheet\ESES.xlsx</con:value></con:property><con:property><con:name>NS_Template_Sheet</con:name><con:value>NS_Individual_Templates</con:value></con:property><con:property><con:name>ClaimTokenEnd</con:name><con:value>/iam/v1/tokens?action=claim</con:value></con:property><con:property><con:name>GetTemplate_altid_End</con:name><con:value>/ns/v1/templates/altid</con:value></con:property><con:property><con:name>generateTokenEnd</con:name><con:value>/tokens</con:value></con:property><con:property><con:name>UserLoginEnd</con:name><con:value>/iam/v1/login</con:value></con:property><con:property><con:name>UserTokenValidationEnd</con:name><con:value>/iam/v1/tokens?action=validate</con:value></con:property><con:property><con:name>UserLogoutEnd</con:name><con:value>/iam/v1/logout</con:value></con:property><con:property><con:name>UserLogout</con:name><con:value>/iam/v1/logout</con:value></con:property><con:property><con:name>NS_Templates_email_Sheet</con:name><con:value>NS_Individual_Templates_email</con:value></con:property><con:property><con:name>UserLoginAuth2.0End</con:name><con:value>/iam/v1/oauth2/login</con:value></con:property><con:property><con:name>UserTokenValidationAuth2.0End</con:name><con:value>/iam/v1/oauth2/validate</con:value></con:property><con:property><con:name>UserLogoutAuth2.0End</con:name><con:value>/iam/v1/oauth2/logout</con:value></con:property><con:property><con:name>SessionTimeout_Sheet</con:name><con:value>SessionTimeout</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>